/////////////////////////////////////////////////////////////////////
// PRESUPONE LA EXISTENCIA EN EL MISMO PROGRAMA DE Cartas-Base.gbs y Mazos-Base.gbs
/////////////////////////////////////////////////////////////////////

//--------------------------------
// Operaciones para selectionSort en datos (interfaz)
//--------------------------------
// En el tablero
function  quedanCartasSinOrdenar()             { return(aux_quedanCartasSinOrdenar())  }
procedure IrALaCartaMásChicaSinOrdenar()       { AuxIrALaCartaMásChicaSinOrdenar()     }
procedure IrALaPróximaPosiciónParaBajarCarta() { AuxIrAPróximaPosiciónParaBajarCarta() }

// Funcional
function quedanCartasEn_(mazo)         { return(aux_quedanCartasEn(mazo))         }
function laCartaMásChicaDe_(mazo)      { return(aux_laCartaMásChicaDe(mazo))      }
function sacarLaCartaMásChicaDe_(mazo) { return(aux_sacarLaCartaMásChicaDe(mazo)) }

function  leerDatosDeEntrada()      { return(aux_leerMazo()) }
procedure RetornarComoSalida_(mazo) { AuxMostrarMazo(mazo) }

procedure IrAlLugarDelResultado() { IrAlBorde(Norte) IrAlBorde(Oeste) }

//--------------------------------
// Auxiliares para selectionSort
//--------------------------------
// En el tablero
//--------------------------------
procedure AuxIrAlInicioDeLaEntrada() { IrAlBorde(Norte) IrAlBorde(Oeste) }
procedure AuxIrAlInicioDeLaSalida()  { IrAlBorde(Sur)   IrAlBorde(Oeste) }

function aux_quedanCartasSinOrdenar() {
    AuxIrALaPrimeraCartaNoLeídaSiExiste()
    return (aux_hayCartaDestapada())
}

procedure AuxIrALaPrimeraCartaNoLeídaSiExiste() {
    AuxIrAlInicioDeLaEntrada()
    while (puedeMover(Este) && not aux_hayCartaDestapada()) { Mover(Este) }
}

procedure AuxIrALaCartaMásChicaSinOrdenar() {
    // PRECONDICIÓN: hay al menos una carta en la fila inferior
    cartaMásChica := aux_leerLaCartaMásChicaSinOrdenar()
    AuxIrALaPrimeraCartaNoLeídaSiExiste()
    while (puedeMover(Este) 
        && not aux_laCartaActualEsIgualA(cartaMásChica)) 
      { Mover(Este) }
}

function aux_leerLaCartaMásChicaSinOrdenar() {
    AuxIrALaPrimeraCartaNoLeídaSiExiste()
    cartaMínimaVista := aux_leerCarta()
    // Si no puede mover al Este, la carta es la única y por tanto la menor
    if (puedeMover(Este)) { 
        Mover(Este)
        // Recorre desde la segunda carta, hasta el final
        while (puedeMover(Este)) {
            if (aux_laCartaActualEsMásChicaQue(cartaMínimaVista)) { cartaMínimaVista := aux_leerCarta() }
            Mover(Este)
        }
        // La última carta debe tratarse por separado, por la condición de borde
        if (aux_laCartaActualEsMásChicaQue(cartaMínimaVista)) { cartaMínimaVista := aux_leerCarta() }
    }
    return(cartaMínimaVista)
}

function aux_laCartaActualEsIgualA(carta) { 
    return (aux_hayCartaDestapada() && carta == aux_leerCarta())
}

function aux_laCartaActualEsMásChicaQue(carta) {
    return (aux_hayCartaDestapada() && (aux_esMenorCarta(aux_leerCarta(), carta)))
}

procedure AuxIrAPróximaPosiciónParaBajarCarta() {
   AuxIrAlInicioDeLaSalida()
   while (puedeMover(Este) && aux_hayCartaDestapada()) { Mover(Este) }
}

//--------------------------------
// Funcional
//--------------------------------
function aux_sacarLaCartaMásChicaDe(mazo) {
    cartaMásChica     := aux_laCartaMásChicaDe(mazo)
    cartasSinProcesar := mazo
	cartasADevolver   := []
    while (cartaMásChica /= primero(cartasSinProcesar)) {
	   cartasADevolver   := cartasADevolver ++ [ primero(cartasSinProcesar) ]
       cartasSinProcesar := resto(cartasSinProcesar)
    }
	if (aux_quedanCartasEn(cartasSinProcesar)) 
	  { cartasADevolver := cartasADevolver ++ resto(cartasSinProcesar) }
    return(cartasADevolver)
}

function aux_laCartaMásChicaDe(mazo) {
    cartaMásChicaVista := primero(mazo)
    cartasSinProcesar  := resto(mazo)
    while (aux_quedanCartasEn(cartasSinProcesar)) {
       if (aux_esMenorCarta(primero(cartasSinProcesar), cartaMásChicaVista))
	     { cartaMásChicaVista := primero(cartasSinProcesar)  }
       cartasSinProcesar := resto(cartasSinProcesar)
    }
    return(cartaMásChicaVista)
}

function aux_quedanCartasEn(mazo) { return (mazo /= []) }
