interactive program {
  K_ARROW_RIGHT -> {
    indice := nroBolitas(Rojo) + 1
    LimpiarTablero()
    TestsDeCartas(indice)
    IrAlOrigen()
    Poner__Veces(Rojo, 1)
  }
}

procedure TestsDeCartas(códigoDeTest) {
  if (códigoDeTest == 1)     { TestTodosLosPalos()          } 
  elseif (códigoDeTest == 2) { TestSacarLetra()             } 
  elseif (códigoDeTest == 3) { TestHayLetra()               }
  elseif (códigoDeTest == 4) { TestLeerLetra()              }
  elseif (códigoDeTest == 5) { TestEstáAntesQue()           }
  elseif (códigoDeTest == 6) { TestEstáDespuésQue()         }
  elseif (códigoDeTest == 7) { TestSiguienteYPrevio()       }
  elseif (códigoDeTest == 8) { TestMinLetraYMaxLetra()      }
  elseif (códigoDeTest == 8) { TestMinLetraYMaxLetra()      }
  elseif (códigoDeTest == 8) { TestMinLetraYMaxLetra()      }
  elseif (códigoDeTest == 8) { TestMinLetraYMaxLetra()      }
  elseif (códigoDeTest == 8) { TestMinLetraYMaxLetra()      }
  elseif (códigoDeTest == 8) { TestMinLetraYMaxLetra()      }
  elseif (códigoDeTest == 8) { TestMinLetraYMaxLetra()      }
  elseif (códigoDeTest == 8) { BOOM("")                     }
  elseif (códigoDeTest == 8) { TestLetraYPonerLetra()       }
  elseif (códigoDeTest == 8) { TestSacarLetra()             }
  elseif (códigoDeTest == 8) { TestHayLetra()               }
  elseif (códigoDeTest == 8) { TestLeerLetra()              }
  elseif (códigoDeTest == 8) { TestEstáAntesQue()           }
  elseif (códigoDeTest == 8) { TestEstáDespuésQue()         }
  elseif (códigoDeTest == 8) { TestSiguienteYPrevio()       }
  elseif (códigoDeTest == 8) { TestMinLetraYMaxLetra()      }
  else                       { BOOM("Pasó todos los tests") }
}

procedure TestTodosLosPalos() {
  PonerCarta_(
}

procedure TestLetraYPonerLetra() {
  PonerTodasLasLetras()
  Assert(0 == 0)
}

procedure PonerTodasLasLetras() {
  código := 10
  PonerLetra_(letra_(código))
  código := código + 1
  while (not (código > 37)) {
    PasarASiguientePosición()
    PonerLetra_(letra_(código))
    código := código + 1
  }
}

procedure TestSacarLetra() {
  PonerTodasLasLetras()
  IrAlOrigen()
  repeat(28) {
    PasarASiguientePosición()
    SacarLetraActual()
  }
  Assert(0 == 0)
}

procedure TestHayLetra() {
  PonerLetra_(letra_(11))
  Assert(hayLetra())
  PasarASiguientePosición()
  SacarTodas()
  Assert(not(hayLetra()))
}

procedure TestLeerLetra() {
  PonerLetra_(letra_(12))
  Assert(letra_(12) == leerLetra())
}

procedure TestEstáAntesQue() {
  PonerLetra_(letra_(13))
  letra1 := leerLetra()
  PasarASiguientePosición()
  PonerLetra_(letra_(14))
  letra2 := leerLetra()
  Assert(esMenorLetra__(letra1, letra2))
  Assert(not(esMenorLetra__(letra2, letra1)))
  Assert(not(esMenorLetra__(letra1, letra1)))
}

procedure TestEstáDespuésQue() {
  PonerLetra_(letra_(13))
  letra1 := leerLetra()
  PasarASiguientePosición()
  PonerLetra_(letra_(14))
  letra2 := leerLetra()
  Assert(esMayorLetra__(letra2, letra1))
  Assert(not(esMayorLetra__(letra1, letra2)))
  Assert(not(esMayorLetra__(letra1, letra1)))
}


procedure TestSiguienteYPrevio() {
  TestSiguienteYPrevioEnMedio()
  TestSiguienteYPrevioEnBordeInferior()
  TestSiguienteYPrevioEnBordeSuperior()
}

procedure TestSiguienteYPrevioEnMedio() {
  PonerLetra_(letra_(15))
  letra := leerLetra()
  PasarASiguientePosición()
  PonerLetra_(letraSiguiente_(letra))
  Assert(letraSiguiente_(letra) == letra_(16))
  PasarASiguientePosición()
  PonerLetra_(letraPrevia_(letra))
  Assert(letraPrevia_(letra) == letra_(14))
}

procedure TestSiguienteYPrevioEnBordeInferior() {
  PasarASiguientePosición()
  PonerLetra_(letra_(10))
  letra := leerLetra()
  PasarASiguientePosición()
  PonerLetra_(letraSiguiente_(letra))
  Assert(letraSiguiente_(letra) == letra_(11))
  PasarASiguientePosición()
  PonerLetra_(letraPrevia_(letra))
  Assert(letraPrevia_(letra) == letra_(37))
}

procedure TestSiguienteYPrevioEnBordeSuperior() {
  PasarASiguientePosición()
  PonerLetra_(letra_(37))
  letra := leerLetra()
  PasarASiguientePosición()
  PonerLetra_(letraSiguiente_(letra))
  Assert(letraSiguiente_(letra) == letra_(10))
  PasarASiguientePosición()
  PonerLetra_(letraPrevia_(letra))
  Assert(letraPrevia_(letra) == letra_(36))
}

procedure TestMinLetraYMaxLetra() {
  PonerLetra_(minLetra())
  Assert(minLetra() == letra_(10))
  PasarASiguientePosición()
  PonerLetra_(maxLetra())
  Assert(maxLetra() == letra_(37))
}



procedure Assert(condiciónAVerificar) {
  PasarASiguientePosición()
  if (condiciónAVerificar) {
    Poner__Veces(Verde, 1)
  } else {
    Poner__Veces(Rojo, 1)
  }
}

procedure LimpiarTablero() {
  IrAlOrigen()
  PasarASiguientePosición()
  repeat(29) {
    SacarTodas()
    PasarASiguientePosición()
  }
  PasarASiguientePosición()
}

