interactive program {
  K_ARROW_RIGHT -> {
    indice := nroBolitas(Rojo) + 1
    LimpiarTablero()
    TestsDePalosDeCartaEspañola(indice)
    IrAlOrigen()
    Poner__Veces(Rojo, 1)
  }
}

procedure TestsDePalosDeCartaEspañola(códigoDeTest) {
  if (códigoDeTest == 1) {
    TestPalos()
  } elseif (códigoDeTest == 2) {
    TestEsMenorPalo()
  } elseif (códigoDeTest == 3) {
    TestEsMayorPalo()
  } elseif (códigoDeTest == 4) {
    TestSiguienteYPrevio()
  } elseif (códigoDeTest == 5) {
    TestMinPaloYMaxPalo()
  } else {
    BOOM("Pasó todos los tests")
  }
}

procedure TestPalos() {
  UsarTodosLosPalos()
  Assert(0 == 0)
}

procedure UsarTodosLosPalos() {
  PonerCarta_(dameCarta__(1, bastos()))
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(1, copas()))
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(1, espadas()))
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(1, oros()))
}

procedure TestEsMenorPalo() {
  PonerCarta_(dameCarta__(2, bastos()))
  Assert(not(esMenorPalo__(bastos(), bastos())))
  Testear2PalosPorMenor(bastos(), copas())
  Testear2PalosPorMenor(bastos(), espadas())
  Testear2PalosPorMenor(bastos(), oros())
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(2, copas()))
  Assert(not(esMenorPalo__(copas(), copas())))
  Testear2PalosPorMenor(copas(), espadas())
  Testear2PalosPorMenor(copas(), oros())
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(2, espadas()))
  Assert(not(esMenorPalo__(espadas(), espadas())))
  Testear2PalosPorMenor(espadas(), oros())
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(2, oros()))
  Assert(not(esMenorPalo__(oros(), oros())))
}

procedure Testear2PalosPorMenor(palo1, palo2) {
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(2, palo2))
  Assert(esMenorPalo__(palo1, palo2))
  Assert(not(esMenorPalo__(palo2, palo1)))
}

procedure TestEsMayorPalo() {
  PonerCarta_(dameCarta__(3, bastos()))
  Assert(not(esMayorPalo__(bastos(), bastos())))
  Testear2PalosPorMayor(bastos(), copas())
  Testear2PalosPorMayor(bastos(), espadas())
  Testear2PalosPorMayor(bastos(), oros())
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(3, copas()))
  Assert(not(esMayorPalo__(copas(), copas())))
  Testear2PalosPorMayor(copas(), espadas())
  Testear2PalosPorMayor(copas(), oros())
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(3, espadas()))
  Assert(not(esMayorPalo__(espadas(), espadas())))
  Testear2PalosPorMayor(espadas(), oros())
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(3, oros()))
  Assert(not(esMayorPalo__(oros(), oros())))
}

procedure Testear2PalosPorMayor(palo1, palo2) {
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(3, palo2))
  Assert(not(esMayorPalo__(palo1, palo2)))
  Assert(esMayorPalo__(palo2, palo1))
}

procedure TestSiguienteYPrevio() {
  TestSiguienteYPrevioEnMedio()
  TestSiguienteYPrevioEnBordeInferior()
  TestSiguienteYPrevioEnBordeSuperior()
}

procedure TestSiguienteYPrevioEnMedio() {
  HacerTestDeSiguienteYPrevio(copas(), espadas(), bastos())
}

procedure HacerTestDeSiguienteYPrevio(palo, paloSiguiente, paloPrevio) {
  PonerCarta_(dameCarta__(4, palo))
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(4, paloSiguiente_(palo)))
  Assert(paloSiguiente_(palo) == paloSiguiente)
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(4, paloPrevio_(palo)))
  Assert(paloPrevio_(palo) == paloPrevio)
}

procedure TestMinPaloYMaxPalo() {
  PonerCarta_(dameCarta__(5, minPalo()))
  Assert(minPalo() == bastos())
  PasarASiguientePosición()
  PonerCarta_(dameCarta__(5, maxPalo()))
  Assert(maxPalo() == oros())
}

procedure TestSiguienteYPrevioEnBordeInferior() {
  PasarASiguientePosición()
  HacerTestDeSiguienteYPrevio(bastos(), copas(), oros())
}

procedure TestSiguienteYPrevioEnBordeSuperior() {
  PasarASiguientePosición()
  HacerTestDeSiguienteYPrevio(oros(), bastos(), espadas())
}

procedure Assert(condiciónAVerificar) {
  PasarASiguientePosición()
  if (condiciónAVerificar) {
    Poner__Veces(Verde, 1)
  } else {
    Poner__Veces(Rojo, 1)
  }
}

procedure LimpiarTablero() {
  PasarASiguientePosición()
  repeat(27) {
    SacarTodas()
    PasarASiguientePosición()
  }
  PasarASiguientePosición()
}

