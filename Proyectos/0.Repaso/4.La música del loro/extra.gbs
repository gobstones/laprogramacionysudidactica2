/*----------------------------------------------------------------------------------------*/
/*---------------- INTERFAZ --------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------*/
procedure MoverAlLoroAl_(dir) { AuxMoverAlLoroAl(dir)        }
procedure TocarElTambor()     { AuxTocarElTambor()           }
procedure TocarLaGuitarra()   { AuxTocarLaGuitarra()         }
function  hayInstrumento()    { return(aux_hayInstrumento()) }
function  hayTambor()         { return(aux_hayTambor())      }
function  hayGuitarra()       { return(aux_hayGuitarra())    }

/*----------------------------------------------------------------------------------------*/
/*---------------- OPERACIONES AUXILIARES ------------------------------------------------*/
/*----------------------------------------------------------------------------------------*/
procedure AuxMoverAlLoroAl(dir){
    TypeCheck(dir,Norte,"'Mover al loro al' espera una dirección como argumento (por ejemplo 'Mover al loro al (Este)'), pero recibió %1")
    AuxVerificarPresenciaDelLoroParaInstrucción()
    if (dir /= Este)                         { BOOM("El loro solo sabe moverse hacia el Este")                       }
    AuxVerificarSiElLoroEstáDisponible()
    AuxSacarAlLoro()
    Mover(dir)
    AuxPonerAlLoro()
}

procedure AuxTocarElTambor() {
    AuxVerificarPresenciaDelLoroParaInstrucción()
    if (not aux_hayTambor())                 { BOOM("No puedo tocar el tambor si no está en esta celda")             }
    AuxVerificarSiElLoroEstáDisponible()
    AuxComenzarElShow()
}

procedure AuxTocarLaGuitarra() {
    AuxVerificarPresenciaDelLoroParaInstrucción()
    if (not aux_hayGuitarra())               { BOOM("No puedo tocar la guitarra si no está en esta celda")           }
    AuxVerificarSiElLoroEstáDisponible()
    AuxComenzarElShow()
}

procedure AuxVerificarPresenciaDelLoroParaInstrucción() {
    if (not aux_estáElLoroEnLaCeldaActual()) { BOOM("No puedo darle instrucciones al loro si no está en esta celda") }
}

procedure AuxVerificarPresenciaDelLoroParaPregunta() {
    if (not aux_estáElLoroEnLaCeldaActual()) { BOOM("No puedo hacerle preguntas al loro si no está en esta celda") }
}

procedure AuxVerificarSiElLoroEstáDisponible() {
    if (aux_comenzóElShow())                 { BOOM("No puedo interrumpir el concierto por mal que toque")           }
}

function aux_elLoro()        { return(Azul)  }
function aux_tambor()        { return(Negro) }
function aux_guitarra()      { return(Verde) }
function aux_showComenzado() { return(Rojo)  }


function aux_hayTambor()                    { 
    AuxVerificarPresenciaDelLoroParaPregunta()
    return (nroBolitas(aux_tambor())   ==1)       
}

function aux_hayGuitarra()                  { 
    AuxVerificarPresenciaDelLoroParaPregunta()
    return (nroBolitas(aux_guitarra()) ==1)       
}

function aux_hayInstrumento()               { return (aux_hayGuitarra() || aux_hayTambor()) }
function aux_estáElLoroEnLaCeldaActual()    { return (nroBolitas(aux_elLoro())   ==1)       }
function aux_hayIndicaciónDeShowComenzado() { return (nroBolitas(aux_showComenzado())==1)   }

function aux_comenzóElShow()                { 
    // PROPÓSITO: Informa si en alguna celda hay una marca de inicio de show. 
    // OBSERVACIÓN: Como es una función, no mueve el cabezal ni altera el tablero
    AuxIniciarRecorrido()
    while (not aux_terminóElRecorrido() && not aux_hayIndicaciónDeShowComenzado()) { AuxAvanzarRecorrido() }
    valorDeRetorno := aux_hayIndicaciónDeShowComenzado()
    return (valorDeRetorno) 
}

procedure AuxPonerAlLoro()    { Poner(aux_elLoro())        }
procedure AuxSacarAlLoro()    { Sacar(aux_elLoro())        }
procedure AuxComenzarElShow() { Poner(aux_showComenzado()) }

//---------------------------------------------------------------------------------------------------/
/*---------------------------------- Operaciones de recorrido ---------------------------------------/
/---------------------------------------------------------------------------------------------------*/
// El Recorrido default es Este-Norte (los 3 deben usar los mismos parámetros)
procedure AuxIniciarRecorrido()    { AuxIniciarRecorridoGral          (Este, Norte)  }
procedure AuxAvanzarRecorrido()    { AuxAvanzarRecorridoGral          (Este, Norte)  }
function  aux_terminóElRecorrido() { return(aux_terminóElRecorridoGral(Este, Norte)) }

procedure AuxIniciarRecorridoGral(dirPpal, dirSecundaria) 
  { IrAlBorde(opuesto(dirPpal)) IrAlBorde(opuesto(dirSecundaria)) }

function aux_terminóElRecorridoGral(dirPpal, dirSecundaria) 
  { return (not puedeMover(dirPpal) && not puedeMover(dirSecundaria)) }

procedure AuxAvanzarRecorridoGral(dirPpal, dirSecundaria) {
    if     (puedeMover(dirPpal))       { Mover(dirPpal)                                                }
    elseif (puedeMover(dirSecundaria)) { IrAlBorde(opuesto(dirPpal)) Mover(dirSecundaria)              }
    else                               { IrAlBorde(opuesto(dirPpal)) IrAlBorde(opuesto(dirSecundaria)) }
}

//---------------------------------------------------------------------------------------------------/
/*---------------------------------- Operaciones de Gobstones ---------------------------------------/
/---------------------------------------------------------------------------------------------------*/
procedure AuxPoner__Veces(c,n) { repeat (n) { Poner(c) } }
procedure AuxSacar__Veces(c,n) { repeat (n) { Sacar(c) } }
