//--------------------------------
// Definiciones de tipos
//--------------------------------
type Palo  is variant { case Comodín {} 
                        case Espadas {} case Oros {} case Bastos {} case Copas {} }
type Carta is record  { field palo   field valor  }

//--------------------------------
// Operaciones de palos (interfaz)
//--------------------------------
///*@ATTRIBUTE@tooltip@Denota el palo de espadas de un mazo de cartas españolas*/
/*@ATTRIBUTE@block_name@Espadas@*/function espadas() { return(Espadas) }
/*@ATTRIBUTE@block_name@Oros@*/   function oros()    { return(Oros)    }
/*@ATTRIBUTE@block_name@Bastos@*/ function bastos()  { return(Bastos)  }
/*@ATTRIBUTE@block_name@Copas@*/  function copas()   { return(Copas)   }

/*@ATTRIBUTE@block_name@_ es menor palo que _@*/
function esMenorPalo__(palo1, palo2) { return(aux_esMenorPalo(palo1, palo2)) }

//--------------------------------
// Operaciones de cartas (interfaz)
//--------------------------------
/*@ATTRIBUTE@block_name@carta _ de _@*/   function dameCarta__(v,p) { return(aux_carta(v, p))    }
/*@ATTRIBUTE@block_name@comodín@*/        function dameComodín()    { return(aux_comodín())      }
/*@ATTRIBUTE@block_name@es comodín _@*/   function esComodín_(c)    { return(aux_esComodín(c))   }
/*@ATTRIBUTE@block_name@palo de la _@*/   function dameElPalo_(c)   { return(aux_dameElPalo(c))  }
/*@ATTRIBUTE@block_name@número de la _@*/ function dameElValor_(c)  { return(aux_dameElValor(c)) }

/*@ATTRIBUTE@block_name@_ es menor carta que _@*/
function esMenorCarta__(carta1, carta2) { return(aux_esMenorCarta(carta1, carta2)) }

//--------------------------------
// Operaciones de sensado de cartas (interfaz)
//--------------------------------
function hayCarta()          { return(aux_hayCarta())                 }
function laCartaEstáTapada() { return(aux_laCartaEstáTapadaConBoom()) }
function hayCartaTapada()    { return(aux_hayCarta() && aux_laCartaEstáTapada()) }
// ---
// Específicas para Memotest
// ---
function laCartaEstáIluminada()             { return(aux_laCartaEstáIluminadaConBoom())      }
function hayCartaDestapadaSinIluminar()     { return(aux_hayCartaDestapadaSinIluminar())     }
function hayOtraCartaDestapadaSinIluminar() { return(aux_hayOtraCartaDestapadaSinIluminar()) }

//--------------------------------
// Operaciones de mostrado de cartas (interfaz)
//--------------------------------
function  leerCarta()                        { return(aux_leerCarta())              }

procedure PonerCarta_(carta)                 { AuxPonerCartaDestapada(carta)        }
procedure SacarCarta()                       { AuxSacarCartaActual()                }
procedure DarVueltaLaCartaActual()           { AuxGirarCartaActual()                }
procedure IluminarLaCartaActual()            { AuxIluminarCartaActual()             }

procedure PonerCartaTapada_(carta)           { AuxPonerCartaTapada(carta)           }
procedure PonerCartaDestapada_(carta)        { AuxPonerCartaDestapada(carta)        }

procedure PasarASiguientePosiciónHacia_(dir) { AuxPasarASiguientePosiciónHacia(dir) }
procedure PasarASiguientePosición()          { AuxPasarASiguientePosición()         }

/////////////////////////////////////////////////////////////////////
// PRESUPONE LA EXISTENCIA EN EL MISMO PROGRAMA DE Cartas-Base.gbs
/////////////////////////////////////////////////////////////////////

//--------------------------------
// Operaciones de mazos (interfaz)
//--------------------------------
function dameLaPrimeraCartaDe_(mazo)   { return(aux_dameLaPrimeraCarta(mazo))  }
function sacarLaPrimeraCartaDe_(mazo)  { return(aux_sacarLaPrimeraCarta(mazo)) }

/*@ATTRIBUTE@block_name@quedan cartas en _?@*/ 
function quedanCartas_(m) { return(aux_quedanCartas(m)) }

function mazoEspañolChinChon() { return(aux_mazoEspañolChinChon()) }
function mazoEspañolTruco()    { return(aux_mazoEspañolTruco())    }

function  leerMazo()         { return (aux_leerMazo()) }
procedure MostrarMazo_(mazo) { AuxMostrarMazo(mazo)    }

/////////////////////////////////////////////////////////////////////
// PRESUPONE LA EXISTENCIA EN EL MISMO PROGRAMA DE Cartas-Base.gbs y Mazos-Base.gbs
/////////////////////////////////////////////////////////////////////

//--------------------------------
// Operaciones para insertionSort (interfaz)
//--------------------------------
function  quedanCartasSinOrdenar()            { return(aux_quedanCartasSinOrdenar())     }
procedure IrALaPróximaCartaSinOrdenar()       { AuxIrALaPróximaCartaSinOrdenarSiExiste() }
procedure IrAlLugarDondeDeberíaPoner_(carta)  { AuxIrAlLugarDondeDeberíaIr(carta)        }
procedure HacerLugarParaUnaCartaSiHaceFalta() { AuxHacerLugarParaUnaCartaSiHaceFalta()   }

//--------------------------------
//--------------------------------
// AUXILIARES
//--------------------------------
//--------------------------------

//--------------------------------
// Operaciones auxiliares de palos
//--------------------------------
function aux_esMenorPalo(palo1, palo2) {
    return (aux_códigoParaElPalo(palo1) < aux_códigoParaElPalo(palo2))
}

function aux_paloParaElCódigo(código) {
  /* PRECONDICIÓN:
      - el código es válido, o sea, corresponde a un palo (está entre 1 y 5)
  */
  switch (código) to {
    1 -> { valorDeRetorno := Espadas }
    2 -> { valorDeRetorno := Oros    }
    3 -> { valorDeRetorno := Bastos  }
    4 -> { valorDeRetorno := Copas   }
    5 -> { valorDeRetorno := Comodín }
    _ -> { BOOM("No es un código de palo válido") }
  }
  return(valorDeRetorno)
}

function aux_códigoParaElPalo(palo) { 
  switch (palo) to {
    Espadas -> { valorDeRetorno := 1 }
    Oros    -> { valorDeRetorno := 2 }
    Bastos  -> { valorDeRetorno := 3 }
    Copas   -> { valorDeRetorno := 4 }
    Comodín -> { valorDeRetorno := 5 }
  }
  return(valorDeRetorno)
}

//--------------------------------
// Operaciones auxiliares de cartas
//--------------------------------
function aux_comodín()        { return(Carta(palo <- Comodín, valor <- 0)) }

function aux_esComodín(carta) { return(palo(carta)==Comodín) }

function aux_carta(valor,palo) {
  /* PRECONDICIÓN:
      - valor y palo corresponden a los de una carta válida
  */
    if (not (valor >= 1 && valor <= 12)) { BOOM("No existen cartas de ese valor") }
    if (palo == Comodín)                 { BOOM("No podés usar esta operación para obtener el comodín") }
    return(Carta(palo <- palo, valor <- valor)) 
}

function aux_esMenorCarta(carta1, carta2) {
    return((aux_esMenorPalo(palo(carta1), palo(carta2))) 
        || (palo(carta1) == palo(carta2) && valor(carta1) < valor(carta2)))
}
                                    
function aux_dameElPalo(carta) { 
  /* PRECONDICIÓN:
      - la carta no es el comodín
  */
  if (aux_esComodín(carta)) { BOOM("El comodín no tiene palo") }
  return(palo(carta)) 
}

function aux_dameElValor(carta) { 
  /* PRECONDICIÓN:
      - la carta no es el comodín
  */
  if (aux_esComodín(carta)) { BOOM("El comodín no tiene valor") }
  return(valor(carta)) 
}

function aux_hayCarta() { 
  return (hayBolitas(aux_colorParaElPalo()) 
       && hayBolitas(aux_colorParaElValor())) 
}
                               
function aux_laCartaEstáTapada() { 
   // PRECONDICIÓN: hay una carta
   return (aux_hayReverso())
}

function aux_laCartaEstáTapadaConBoom() { 
   if (not aux_hayCarta()) { BOOM("No hay una carta que pueda estar tapada") }
   return(aux_laCartaEstáTapada())    
}

function aux_laCartaEstáIluminada() {
   // PRECONDICIÓN: hay una carta y no está tapada
   return (aux_hayIluminación())
}

function aux_laCartaEstáIluminadaConBoom() { 
   if (not aux_hayCarta())      { BOOM("No hay una carta que pueda estar iluminada")    }
   if (aux_laCartaEstáTapada()) { BOOM("Las cartas tapadas no pueden estar iluminadas") }
   return(aux_laCartaEstáIluminada()) 
}

function aux_hayCartaDestapada() { 
   return (aux_hayCarta()           
        && not aux_laCartaEstáTapada())
}

function aux_hayCartaDestapadaSinIluminar() { 
   return (aux_hayCarta()           
        && not aux_laCartaEstáTapada()
		&& not aux_laCartaEstáIluminada())
}

function aux_hayOtraCartaDestapadaSinIluminar() {
  /* PRECONDICIÓN:
      - no hay ninguna celda marcada
  */
  AuxMarcar()
  IrAlBorde(Sur) IrAlBorde(Oeste)
  while (not aux_terminoElRecorrido() && not aux_hayCartaDestapadaSinIluminarYSinMarca()) 
     { AuxPasarASiguientePosición() }
  valorDeRetorno := aux_hayCartaDestapadaSinIluminarYSinMarca()
  AuxVolverALaMarca()
  AuxDesmarcar()
  return(valorDeRetorno)
}                                    

//--------------------------------
// Operaciones de mostrado de cartas
//--------------------------------
function aux_leerCarta() {
  /* PRECONDICIÓN:
      - hay una carta destapada en la celda actual
  */
  if (not aux_hayCarta())      { BOOM("No hay una carta que pueda leer") }
  if (aux_laCartaEstáTapada()) { BOOM("No puedo leer una carta tapada")  }
  return(Carta(valor <- nroBolitas(aux_colorParaElValor())
              ,palo  <- aux_paloParaElCódigo(nroBolitas(aux_colorParaElPalo()))
              ))
}         

procedure AuxSacarCartaActual() {
  /* PRECONDICIÓN:
      - hay una carta destapada en la celda actual
  */
  if (not aux_hayCarta())       { BOOM("No hay una carta que pueda sacar") }
  if (aux_laCartaEstáTapada())  { BOOM("No puedo sacar una carta tapada")  }
  AuxSacarTodas_(aux_colorParaElPalo())
  AuxSacarTodas_(aux_colorParaElValor())
  AuxSacarTodas_(aux_colorParaMarca())
}

procedure AuxGirarCartaActual() {
   if (not aux_hayCarta())         { BOOM("No hay una carta que pueda girar")   }
   if (aux_laCartaEstáIluminada()) { BOOM("No puedo girar una carta iluminada") }
   if (aux_laCartaEstáTapada()) 
        { AuxDestaparCartaActual() }
   else { AuxTaparCartaActual()    }
}

procedure AuxIluminarCartaActual() {
  /* PROPÓSITO:
      - si hay una carta destapada sin iluminar, la ilumina.
	  - en cualquier otro caso, no hace nada 
	     (las cartas tapadas o iluminadas permanecen igual y 
		  si no hay carta, no pasa nada)
  */
   if (aux_hayCartaDestapadaSinIluminar()) { Poner(aux_colorParaMarca()) } 
}

procedure AuxTaparCartaActual()    { 
  // PRECONDICIÓN: hay una carta destapada y no iluminada en la celda actual
  Poner(aux_colorParaElReverso()) 
}

procedure AuxDestaparCartaActual() { 
  // PRECONDICIÓN: hay una carta tapada en la celda actual
  Sacar(aux_colorParaElReverso()) 
}

procedure AuxPonerCartaTapada(carta) {
  // PRECONDICIÓN: no hay una carta en la celda actual
  AuxPonerCartaDestapada(carta)
  AuxTaparCartaActual()
}

procedure AuxPonerCartaDestapada(carta) {
  // PRECONDICIÓN: no hay una carta en la celda actual
  if (aux_hayCarta()) { BOOM("No puedo bajar una carta donde ya hay una") }
  AuxSacarTodas()
  AuxPoner__Veces(aux_colorParaElValor(), valor(carta)) 
  AuxPoner__Veces(aux_colorParaElPalo(), aux_códigoParaElPalo(palo(carta))) 
}

procedure AuxPasarASiguientePosiciónHacia(dir) { if (puedeMover(dir)) { Mover(dir) } }
procedure AuxPasarASiguientePosición() {
    if (puedeMover(Este))      { Mover(Este)                     }
    elseif (puedeMover(Norte)) { IrAlBorde(Oeste) Mover(Norte)   }
    else                       { IrAlBorde(Oeste) IrAlBorde(Sur) }
}

//--------------------------------
// Otras operaciones auxliares
//--------------------------------
function aux_hayReverso()         { return (hayBolitas(aux_colorParaElReverso())) }
function aux_hayIluminación()     { return (nroBolitas(aux_colorParaMarca())==1) }

function aux_colorParaElPalo()    { return(Negro) }
function aux_colorParaElValor()   { return(Azul)  }
function aux_colorParaElReverso() { return(Rojo)  }
function aux_colorParaMarca()     { return(Verde) }

//--------------------------------
// Operaciones de recorrido
//--------------------------------
function aux_hayMarca() { return (nroBolitas(aux_colorParaMarca())>1) }
function aux_hayCartaDestapadaSinIluminarYSinMarca() { 
    return (aux_hayCartaDestapadaSinIluminar() && not aux_hayMarca()) 
}

procedure AuxMarcar()    { AuxPoner__Veces(aux_colorParaMarca(),2) }
procedure AuxDesmarcar() { 
  // PRECONDICIÓN: hay una marca en el lugar (o sea, aux_hayMarca() es verdadero)
  AuxSacar__Veces(aux_colorParaMarca(),2) 
}

function aux_terminoElRecorrido() { return (not puedeMover(Este) && not puedeMover(Norte)) }

procedure AuxVolverALaMarca() {
  // PRECONDICIÓN: hay una marca en el tablero
  IrAlBorde(Sur) IrAlBorde(Oeste)
  while (not aux_terminoElRecorrido() && not aux_hayMarca()) { AuxPasarASiguientePosición() }
}

//--------------------------------
// Operaciones auxliares de Gobstones
//--------------------------------
procedure AuxPoner__Veces(c,n) { repeat (n) { Poner(c) } }
procedure AuxSacar__Veces(c,n) { repeat (n) { Sacar(c) } }

procedure AuxSacarTodas()   { foreach c in [Azul..Rojo] { AuxSacarTodas_(c) } }
procedure AuxSacarTodas_(c) { AuxSacar__Veces(c, nroBolitas(c)) }


/////////////////////////////////////////////////////////////////////
// PRESUPONE LA EXISTENCIA EN EL MISMO PROGRAMA DE Cartas-Base.gbs
/////////////////////////////////////////////////////////////////////

//--------------------------------
//--------------------------------
// AUXILIARES
//--------------------------------
//--------------------------------

//--------------------------------
// Operaciones de mazos
//--------------------------------
function aux_quedanCartas(mazo)       { return(not(mazo==[])) }

// PRECONDICIÓN: quedan cartas en el mazo
function aux_dameLaPrimeraCarta(mazo)  { return(primero(mazo)) }
function aux_sacarLaPrimeraCarta(mazo) { return(resto(mazo))   }

function aux_mazoEspañolChinChon() {
    mazo := []
    foreach palo in [ Espadas, Oros, Copas, Bastos ]
      { mazo := mazo ++ aux_cartasEspañolasChinChonDe(palo) }
    mazo := mazo ++ [ aux_comodín(), aux_comodín() ]
    return(mazo)
}

function aux_cartasEspañolasChinChonDe(palo) {
    cartasDelPalo := []
    foreach valor in [1..12] 
      { cartasDelPalo := cartasDelPalo ++ [ aux_carta(valor,palo) ] }
    return(cartasDelPalo)
}

function aux_mazoEspañolTruco() {
    mazo := []
    foreach palo in [Espadas, Oros, Copas, Bastos] 
      { mazo := mazo ++ aux_cartasEspañolasTrucoDe(palo) }
    return(mazo)
}

function aux_cartasEspañolasTrucoDe(palo) {
    cartasDelPalo := []
    foreach valor in [1..7]   
      { cartasDelPalo := cartasDelPalo ++ [ aux_carta(valor,palo) ] }
    foreach valor in [10..12] 
      { cartasDelPalo := cartasDelPalo ++ [ aux_carta(valor,palo) ] }
    return(cartasDelPalo)
}

function aux_leerMazo() {
   mazo := []
   while (puedeMover(Este) && aux_hayCartaDestapada()) {
     mazo := mazo ++ [ aux_leerCarta() ]
	 Mover(Este)
   }
   if (aux_hayCartaDestapada()) { mazo := mazo ++ [ aux_leerCarta() ] }
   return(mazo)
}

procedure AuxSacarMazo() {
   while (puedeMover(Este) && aux_hayCartaDestapada()) {
     AuxSacarCartaActual()
	 Mover(Este)
   }
   if (aux_hayCartaDestapada()) { AuxSacarCartaActual() }
}

procedure AuxMostrarMazo(mazo) {
   // PROPÓSITO: muestra la parte del mazo que pueda entre la celda actual y el borde del tablero, de a una carta por celda
   // PRECONDICIÓN: las celdas donde vayan a ir cartas deben estar vacías
   faltanMostrar := mazo
   while (puedeMover(Este) && aux_quedanCartas(faltanMostrar)) {
     AuxPonerCartaDestapada(primero(faltanMostrar))
	 Mover(Este)
     faltanMostrar := resto(faltanMostrar)
   }
   if (aux_quedanCartas(faltanMostrar)) { AuxPonerCartaDestapada(primero(faltanMostrar)) }
}

/////////////////////////////////////////////////////////////////////
// PRESUPONE LA EXISTENCIA EN EL MISMO PROGRAMA DE Cartas-Base.gbs y Mazos-Base.gbs
/////////////////////////////////////////////////////////////////////

//--------------------------------
// Auxiliares para insertionSort
//--------------------------------
function aux_quedanCartasSinOrdenar() {
    AuxIrALaPróximaCartaSinOrdenarSiExiste()
    return(aux_hayCartaDestapada())
}

procedure AuxIrALaPróximaCartaSinOrdenarSiExiste() {
    IrAlBorde(Norte) IrAlBorde(Oeste)
    while (puedeMover(Este) && not aux_hayCartaDestapada()) { Mover(Este) }
}

procedure AuxIrAlLugarDondeDeberíaIr(carta) {
   IrAlBorde(Sur) IrAlBorde(Oeste)
   while (puedeMover(Este) && aux_esMásChicaQueEsta(carta))
	 { Mover(Este) }
}

function aux_esMásChicaQueEsta(carta) {
    return (aux_hayCartaDestapada() && (aux_esMenorCarta(aux_leerCarta(), carta)))
}

procedure AuxHacerLugarParaUnaCartaSiHaceFalta() {
    // PRECONDICIÓN: hay al menos un lugar libre en la fila superior
	if (aux_hayCartaDestapada()) {
      carta1 := aux_leerCarta(); SacarCartaActual()
	  Mover(Este)
	  while (aux_hayCartaDestapada()) {
  	    carta2 := aux_leerCarta(); SacarCartaActual()
	    AuxPonerCartaDestapada(carta1)
	    carta1 := carta2
	    if (not puedeMover(Este)) { BOOM("¡No había lugar!") }
	    Mover(Este)
	  }
	  AuxPonerCartaDestapada(carta1)
	  while (aux_hayCartaDestapada()) { Mover(Oeste) }
	}
}
