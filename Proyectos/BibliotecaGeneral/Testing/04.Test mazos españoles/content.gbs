interactive program {
  K_ARROW_RIGHT -> {
    IrAlOrigen()
    indice := nroBolitas(Rojo) + 1
    LimpiarTablero()
    TestsDeMazosEspañoles(indice)
    IrAlOrigen()
    Poner__Veces(Rojo, 1)
  }
  K_ARROW_LEFT -> {
    IrAlOrigen()
    indice := nroBolitas(Rojo) - 1
    LimpiarTablero()
    TestsDeMazosEspañoles(indice)
    IrAlOrigen()
    Sacar__Veces(Rojo, 1)
  }
  K_CTRL_ARROW_RIGHT -> {
    IrAlOrigen()
    indice := nroBolitas(Rojo) + 10
    LimpiarTablero()
    TestsDeMazosEspañoles(indice)
    IrAlOrigen()
    Poner__Veces(Rojo, 10)
  }
}

procedure TestsDeMazosEspañoles(códigoDeTest) {
  if (códigoDeTest == 1) {
    TestMazoEspañolYPonerMazo()
  } elseif (códigoDeTest == 2) {
    TestSacarMazo()
  } elseif (códigoDeTest == 3) {
    TestDameLaPrimeraCarta_SacarLaPrimeraCartaYQuedanCartas()
  } elseif (códigoDeTest == 4) {
    TestDameLaÚltimaCarta_SacarLaÚltimaCartaYQuedanCartas()
  } elseif (códigoDeTest == 5) {
    TestMazoActualYMazoVacíoYAgregarAlPrincipio()
  } elseif (códigoDeTest == 6) {
    TestJuntarMazosYAgregarAlFinal()
  } elseif (códigoDeTest == 7) {
    TestDameLaMásChicaYDameLaMásGrande()
  } elseif (códigoDeTest == 8) {
    TestDarVueltaElMazoActual()
  } elseif (códigoDeTest == 9) {
    TestMazoTapado()
  } else {
    BOOM("Pasó todos los tests")
  }
}

function mazoDeEjemplo1() {
  mazoActual := mazoVacío()
  valorActual := armarValorAs()
  cantidad := 6
  while (not (cantidad == 0)) {
    mazoActual := agregarAlFinalDelMazo__(mazoActual, dameCarta__(valorActual, espadas()))
    valorActual := valorSiguiente_(valorSiguiente_(valorSiguiente_(valorActual)))
    cantidad := cantidad - 1
  }
  return (mazoActual)
}

procedure TestMazoEspañolYPonerMazo() {
  PonerMazo_(mazoEspañol())
  Assert(0 == 0)
}

procedure TestMazoActualYMazoVacíoYAgregarAlPrincipio() {
  PonerMazo_(invertir(mazoDeEjemplo1()))
  IrAlOrigen()
  PasarASiguientePosición()
  mazoActual := mazoActual()
  repeat(cantidadDeCartasDelMazo_(mazoActual) - 1) {
    PasarASiguientePosición()
  }
  Assert(mazoDeEjemplo1() == invertir(mazoActual))
}

procedure TestSacarMazo() {
  PonerMazo_(mazoEspañol())
  IrAlOrigen()
  PasarASiguientePosición()
  SacarMazoActual()
  Assert(0 == 0)
}

function mazoDeEjemplo2() {
  mazoActual := mazoVacío()
  valorActual := armarValor_(6)
  cantidad := 8
  while (not (cantidad == 0)) {
    mazoActual := agregarAlPrincipioDelMazo__(mazoActual, dameCarta__(valorActual, bastos()))
    valorActual := valorSiguiente_(valorSiguiente_(valorSiguiente_(valorActual)))
    cantidad := cantidad - 1
  }
  return (mazoActual)
}

procedure TestDameLaPrimeraCarta_SacarLaPrimeraCartaYQuedanCartas() {
  PonerCarta_(dameLaPrimeraCartaDe_(mazoEspañol()))
  mazoActual := sacarLaPrimeraCartaDe_(mazoEspañol())
  while (not (not(quedanCartas_(mazoActual)))) {
    PasarASiguientePosición()
    PonerCarta_(dameLaPrimeraCartaDe_(mazoActual))
    mazoActual := sacarLaPrimeraCartaDe_(mazoActual)
  }
  Assert(0 == 0)
}

procedure TestDameLaÚltimaCarta_SacarLaÚltimaCartaYQuedanCartas() {
  PonerCarta_(dameLaÚltimaCartaDe_(mazoEspañol()))
  mazoActual := sacarLaÚltimaCartaDe_(mazoEspañol())
  while (not (not(quedanCartas_(mazoActual)))) {
    PasarASiguientePosición()
    PonerCarta_(dameLaÚltimaCartaDe_(mazoActual))
    mazoActual := sacarLaÚltimaCartaDe_(mazoActual)
  }
  Assert(0 == 0)
}

function invertir(mazo) {
  mazoADevolver := mazoVacío()
  mazoActual := mazo
  while (not (not(quedanCartas_(mazoActual)))) {
    mazoADevolver := agregarAlPrincipioDelMazo__(mazoADevolver, dameLaPrimeraCartaDe_(mazoActual))
    mazoActual := sacarLaPrimeraCartaDe_(mazoActual)
  }
  return (mazoADevolver)
}

procedure TestJuntarMazosYAgregarAlFinal() {
  PonerMazo_(juntarMazos__(mazoDeEjemplo1(), mazoDeEjemplo2()))
  IrAlOrigen()
  PasarASiguientePosición()
  repeat(cantidadDeCartasDelMazo_(mazoDeEjemplo1())) {
    PasarASiguientePosición()
  }
  mazoActual := mazoActual()
  repeat(cantidadDeCartasDelMazo_(mazoActual) - 1) {
    PasarASiguientePosición()
  }
  Assert(mazoDeEjemplo2() == mazoActual)
}

procedure TestDameLaMásChicaYDameLaMásGrande() {
  mazo := invertir(juntarMazos__(mazoDeEjemplo1(), mazoDeEjemplo2()))
  PonerMazo_(mazo)
  Assert(dameLaCartaMásChicaDe_(mazo) == dameCarta__(armarValorAs(), bastos()))
  Assert(dameLaCartaMásGrandeDe_(mazo) == dameCarta__(armarValorRey(), espadas()))
}

procedure TestDarVueltaElMazoActual() {
  PonerMazo_(mazoEspañol())
  IrAlOrigen()
  PasarASiguientePosición()
  DarVueltaElMazoActual()
  Assert(0 == 0)
}

procedure TestMazoTapado() {
  PonerMazo_(mazoDeEjemplo1())
  IrAlOrigen()
  PasarASiguientePosición()
  DarVueltaElMazoActual()
  IrAlOrigen()
  PasarASiguientePosición()
  mazoActual := mazoTapado()
  repeat(cantidadDeCartasDelMazo_(mazoActual) - 1) {
    PasarASiguientePosición()
  }
  Assert(mazoDeEjemplo1() == mazoActual)
}

procedure Assert(condiciónAVerificar) {
  PasarASiguientePosición()
  if (condiciónAVerificar) {
    Poner__Veces(Verde, 1)
  } else {
    Poner__Veces(Rojo, 1)
  }
}

procedure LimpiarTablero() {
  PasarASiguientePosición()
  repeat(47) {
    SacarTodas()
    PasarASiguientePosición()
  }
  PasarASiguientePosición()
}
