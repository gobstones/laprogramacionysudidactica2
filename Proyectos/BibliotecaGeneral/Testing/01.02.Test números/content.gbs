interactive program {
  K_ARROW_RIGHT -> {
    indice := nroBolitas(Rojo) + 1
    IrAlOrigen()
    LimpiarTablero()
    TestsDeNúmeros(indice)
    IrAlOrigen()
    Poner__Veces(Rojo, 1)
  }
}

procedure TestsDeNúmeros(códigoDeTest) {
  if (códigoDeTest == 1) {
    TestPonerNúmero()
  } elseif (códigoDeTest == 2) {
    TestSacarNúmero()
  } elseif (códigoDeTest == 3) {
    TestHayNúmero()
  } elseif (códigoDeTest == 4) {
    TestNúmeroActual()
  } elseif (códigoDeTest == 5) {
    TestOcultarNúmero()
  } elseif (códigoDeTest == 6) {
    TestRevelarNúmero()
  } elseif (códigoDeTest == 7) {
    TestNúmeroPorDígitosOculto()
  } elseif (códigoDeTest == 8) {
    TestHayNúmeroPorDígitosOcultoYNoOculto()
  } else {
    BOOM("Pasó todos los tests")
  }
}

procedure TestPonerNúmero() {
  PonerVariosNúmeros()
}

procedure PonerVariosNúmeros() {
  número := 0
  PonerNúmero_(número)
  Assert(0 == 0)
  número := número + 1
  while (not (número > 12)) {
    PasarASiguientePosición()
    PonerNúmero_(número)
    Assert(0 == 0)
    número := número + 1
  }
  PasarASiguientePosición()
  PonerNúmero_(253)
  Assert(0 == 0)
  PasarASiguientePosición()
  PonerNúmero_(315)
  Assert(0 == 0)
  PasarASiguientePosición()
  PonerNúmero_(77)
  Assert(0 == 0)
  PasarASiguientePosición()
  PonerNúmero_(42)
  Assert(0 == 0)
  PasarASiguientePosición()
  PonerNúmero_(999)
  Assert(0 == 0)
}

procedure TestSacarNúmero() {
  PonerNúmero_(942)
  PasarASiguientePosición()
  PasarASiguientePosición()
  PonerNúmero_(942)
  Assert(0 == 0)
  IrAlOrigen()
  PasarASiguientePosición()
  SacarNúmeroActual()
  Assert(0 == 0)
}

procedure TestHayNúmero() {
  PonerNúmero_(417)
  Assert(hayNúmero())
  PasarASiguientePosición()
  SacarTodas()
  Assert(not(hayNúmero()))
}

procedure TestNúmeroActual() {
  númeroOriginal := 333
  PonerNúmero_(númeroOriginal)
  númeroLeído := númeroActual()
  Assert(númeroLeído == númeroOriginal)
}

procedure TestOcultarNúmero() {
  PonerNúmero_(17)
  PasarASiguientePosición()
  PasarASiguientePosición()
  PonerNúmero_(17)
  Assert(0 == 0)
  IrAlOrigen()
  PasarASiguientePosición()
  OcultarNúmeroActual()
  Assert(0 == 0)
}

procedure TestNúmeroPorDígitosOculto() {
  númeroOriginal := 99
  PonerNúmero_(númeroOriginal)
  PasarASiguientePosición()
  PasarASiguientePosición()
  PonerNúmero_(númeroOriginal)
  Assert(0 == 0)
  IrAlOrigen()
  PasarASiguientePosición()
  OcultarNúmeroActual()
  IrAlOrigen()
  PasarASiguientePosición()
  númeroLeído := númeroOculto()
  Assert(númeroLeído == númeroOriginal)
}

procedure TestRevelarNúmero() {
  PonerNúmero_(42)
  PasarASiguientePosición()
  PasarASiguientePosición()
  PonerNúmero_(42)
  Assert(0 == 0)
  IrAlOrigen()
  PasarASiguientePosición()
  OcultarNúmeroActual()
  PasarASiguientePosición()
  PasarASiguientePosición()
  OcultarNúmeroActual()
  IrAlOrigen()
  PasarASiguientePosición()
  RevelarNúmeroActual()
  Assert(0 == 0)
}

procedure TestHayNúmeroPorDígitosOcultoYNoOculto() {
  PonerNúmero_(77)
  PasarASiguientePosición()
  PasarASiguientePosición()
  PonerNúmero_(77)
  IrAlOrigen()
  PasarASiguientePosición()
  OcultarNúmeroActual()
  IrAlOrigen()
  PasarASiguientePosición()
  hayNúmeroOculto := hayNúmeroOculto()
  Assert(hayNúmeroOculto)
  PasarASiguientePosición()
  hayNúmeroNoOculto := hayNúmeroNoOculto()
  Assert(hayNúmeroNoOculto)
}

procedure Assert(condiciónAVerificar) {
  PasarASiguientePosición()
  if (condiciónAVerificar) {
    Poner__Veces(Verde, 1)
  } else {
    Poner__Veces(Rojo, 1)
  }
}

procedure LimpiarTablero() {
  PasarASiguientePosición()
  repeat(47) {
    SacarTodas()
    PasarASiguientePosición()
  }
  PasarASiguientePosición()
}

