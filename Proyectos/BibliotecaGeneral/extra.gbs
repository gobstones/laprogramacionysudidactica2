/*==================================================================================================*/
/*---- PROVEE --------------------------------------------------------------------------------------*/
/*------------------------------ INTERFAZ de 04-MazosEspañoles-Base.gbs ----------------------------*/
/*----------------------------------------- (en línea ????) ----------------------------------------*/
/*---------------------------- INTERFAZ de 03-CartasEspañolasDe40-Base.gbs -------------------------*/
/*----------------------------------------- (en línea ????) ----------------------------------------*/
/*------------------------- INTERFAZ de 03-01-PalosDeCartaEspañola-Base.gbs ------------------------*/
/*----------------------------------------- (en línea ????) ----------------------------------------*/
/*------------------------ INTERFAZ de 03-02-ValoresDeCartaEspañolaDe40-Base.gbs -------------------*/
/*----------------------------------------- (en línea ????) ----------------------------------------*/
/*--------------------------------- INTERFAZ de 02-Letras-Base.gbs ---------------------------------*/
/*----------------------------------------- (en línea  648) ----------------------------------------*/
/*------------------------------ INTERFAZ de 01-02-Números-Base.gbs --------------------------------*/
/*----------------------------------------- (en línea  480) ----------------------------------------*/
/*------------------------- INTERFAZ de 01-01-NúmerosPorDígitos-Base.gbs ---------------------------*/
/*----------------------------------------- (en línea  229) ----------------------------------------*/
/*--------------------------------- INTERFAZ de 00.Listas-Base.gbs ---------------------------------*/
/*----------------------------------------- (en línea  191) ----------------------------------------*/
/*------------------------------- INTERFAZ de 00.Gobstones-Base.gbs --------------------------------*/
/*----------------------------------------- (en línea   23) ----------------------------------------*/
/*==================================================================================================*/

/*==================================================================================================*/
/*------------------------------- INTERFAZ de 00.Gobstones-Base.gbs ---------------------------------/
/----- Autor: Pablo E. "Fidel" Martínez López -------------------------------------------------------/
/----- EMail: fidel@unq.edu.ar                -------------------------------------------------------/
/----- Fecha creación: 2018.06                -------------------------------------------------------/
/----- Fecha última modificación: 2018.06     -------------------------------------------------------/
/----- Licencia: GNU General Public License, v2                                             ---------/
/----- Sitio Oficial de la licencia: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html  --------*/
/*==================================================================================================*/
/*@ATTRIBUTE@block_name@Poner _, _ veces@*/ procedure Poner__Veces(c,n) { AuxPoner__Veces(c,n) }
/*@ATTRIBUTE@block_name@Sacar _, _ veces@*/ procedure Sacar__Veces(c,n) { AuxSacar__Veces(c,n) }
/*@ATTRIBUTE@block_name@Mover _, _ veces@*/ procedure Mover__Veces(d,n) { AuxMover__Veces(d,n) }
procedure SacarTodas()       { AuxSacarTodas()      }
procedure SacarTodas_(c)     { AuxSacarTodas_(c)    }
procedure MoverSiPuede_(dir) { AuxMoverSiPuede(dir) }

procedure IrAlOrigen()              { AuxIrAlOrigen()              }
procedure PasarASiguientePosición() { AuxPasarASiguientePosición() }
/*==================================================================================================*/
/*----------------------------- FIN INTERFAZ de 00.Gobstones-Base.gbs ------------------------------*/
/*==================================================================================================*/

/*==================================================================================================*/
  /*------------------------------ AUXILIARES de 00-Gobstones-Base.gbs -------------------------------*/
/*==================================================================================================*/

//---------------------------------------------------------------------------------------------------/
/*----------------------------- Operaciones auxiliares de Gobstones ---------------------------------/
/---------------------------------------------------------------------------------------------------*/
procedure AuxPoner__Veces(c,n) { repeat (n) { Poner(c) } }
procedure AuxSacar__Veces(c,n) { repeat (n) { Sacar(c) } }
procedure AuxMover__Veces(d,n) { repeat (n) { Mover(d) } }

procedure AuxSacarTodas()   { foreach c in [minColor()..maxColor()] { AuxSacarTodas_(c) } }
procedure AuxSacarTodas_(c) { AuxSacar__Veces(c, nroBolitas(c)) }

procedure AuxMoverSiPuede(dir)         { if (puedeMover(dir)) { Mover(dir) }   }

// Las direcciones deben ser las mismas en estos dos procedimientos
procedure AuxIrAlOrigen()              { AuxIniciarRecorridoGral(Este, Sur) }
procedure AuxPasarASiguientePosición() { AuxAvanzarRecorridoGral(Este, Sur) }

//---------------------------------------------------------------------------------------------------/
/*---------------------------- Operaciones auxiliares de codificación -------------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_colorParaElDato()     { return(Negro) }
function aux_colorParaElTipo()     { return(Azul)  }
function aux_colorParaElAtributo() { return(Rojo)  }
function aux_colorParaLaMarca()    { return(Verde) }

function aux_leerTipo()     { return(nroBolitas(aux_colorParaElTipo()))     }
function aux_leerDato()     { return(nroBolitas(aux_colorParaElDato()))     }
function aux_leerAtributo() { return(nroBolitas(aux_colorParaElAtributo())) }
function aux_leerMarca()    { return(nroBolitas(aux_colorParaLaMarca()))    }

//---------------------------------------------------------------------------------------------------/
/*------------------------------------ Auxiliares de atributos --------------------------------------/
/--------- Para decidir nuevos atributos, cambiar W, X, Y o Z por el nombre correspondiente ---------/
/-------------------------- Para más atributos nuevos, agregar más códigos --------------------------/
/---------------------------------------------------------------------------------------------------*/
function  aux_códigoParaElAtributoReverso() { return(0) }
function  aux_hayAtributoReverso()  { return (aux_hayAtributo(aux_códigoParaElAtributoReverso())) }
procedure AuxPonerAtributoReverso() { AuxPonerAtributo(aux_códigoParaElAtributoReverso())         }
procedure AuxSacarAtributoReverso() { AuxSacarAtributo(aux_códigoParaElAtributoReverso())         }

function  aux_códigoParaElAtributoIluminación() { return(1) }
function  aux_hayAtributoIluminación()  { return (aux_hayAtributo(aux_códigoParaElAtributoIluminación())) }
procedure AuxPonerAtributoIluminación() { AuxPonerAtributo(aux_códigoParaElAtributoIluminación())         }
procedure AuxSacarAtributoIluminación() { AuxSacarAtributo(aux_códigoParaElAtributoIluminación())         }

function  aux_códigoParaElAtributoW() { return(2) }
function  aux_hayAtributoW()  { return (aux_hayAtributo(aux_códigoParaElAtributoW())) }
procedure AuxPonerAtributoW() { AuxPonerAtributo(aux_códigoParaElAtributoW())         }
procedure AuxSacarAtributoW() { AuxSacarAtributo(aux_códigoParaElAtributoW())         }

function  aux_códigoParaElAtributoX() { return(3) }
function  aux_hayAtributoX()  { return (aux_hayAtributo(aux_códigoParaElAtributoX())) }
procedure AuxPonerAtributoX() { AuxPonerAtributo(aux_códigoParaElAtributoX())         }
procedure AuxSacarAtributoX() { AuxSacarAtributo(aux_códigoParaElAtributoX())         }

function  aux_códigoParaElAtributoY() { return(4) }
function  aux_hayAtributoY()  { return (aux_hayAtributo(aux_códigoParaElAtributoY())) }
procedure AuxPonerAtributoY() { AuxPonerAtributo(aux_códigoParaElAtributoY())         }
procedure AuxSacarAtributoY() { AuxSacarAtributo(aux_códigoParaElAtributoY())         }

function  aux_códigoParaElAtributoZ() { return(5) }
function  aux_hayAtributoZ()  { return (aux_hayAtributo(aux_códigoParaElAtributoZ())) }
procedure AuxPonerAtributoZ() { AuxPonerAtributo(aux_códigoParaElAtributoZ())         }
procedure AuxSacarAtributoZ() { AuxSacarAtributo(aux_códigoParaElAtributoZ())         }

function  aux_hayAtributo(códigoAtributo)  {
   return (aux_contieneLaIésimaPotenciaDe2(nroBolitas(aux_colorParaElAtributo()),códigoAtributo))
}
procedure AuxPonerAtributo(códigoAtributo) { Poner__Veces(aux_colorParaElAtributo(), aux_potencia(2,códigoAtributo)) }
procedure AuxSacarAtributo(códigoAtributo) { Sacar__Veces(aux_colorParaElAtributo(), aux_potencia(2,códigoAtributo)) }

function aux_contieneLaIésimaPotenciaDe2(n,i) {
  // PRECONDICIÓN: n>=0, i>=0
  j := 0                     // j cuenta las potencias de 2 desde 0 hasta i
  m := n                     // m guarda el número original con j shifts a derecha (los bits desde el j+1 en adelante)
  while (m > 0 && j < i) {   // si m es 0, todos los bits que siguen son 0, y si j es i, entonces hay que mirar ese bit
     j := j + 1              // paso a la siguiente potencia de 2
     m := m div 2            // hago el shift de m a derecha
  }
  return (m mod 2 == 1)      // si m es 0 da False, y si no, depende del último bit (el de paridad)

  // Ej: i<-2, n<-12
  //    j  m   (m mod 2)
  //    0 12     0
  //    1  6     0
  //    2  3     1    Resultado: True
}

function aux_potencia(x,n) {
  // PRECONDICIÓN: x>=0, n>=0
  pot := 1
  i := 0
  while (i<n) {
     pot := pot * x
     i := i + 1
  }
  return (pot)
}

//---------------------------------------------------------------------------------------------------/
/*----------------------------------- Operaciones de marcas -----------------------------------------/
/---------------------------------------------------------------------------------------------------*/
// La marca son 100 bolitas del aux_colorParaMarca, pero puede haber otras marcas antes
function  aux_códigoParaLaMarca() { return(100) }
function  aux_hayMarca() { return (nroBolitas(aux_colorParaLaMarca())>=aux_códigoParaLaMarca()) }
procedure AuxMarcar()    { AuxPoner__Veces(aux_colorParaLaMarca(),aux_códigoParaLaMarca())     }
procedure AuxDesmarcar() { 
  // PRECONDICIÓN: hay una marca en el lugar (o sea, aux_hayMarca() es verdadero)
  AuxSacar__Veces(aux_colorParaLaMarca(),aux_códigoParaLaMarca()) 
}

procedure AuxVolverALaMarca() {
  // PRECONDICIÓN: hay una marca en el tablero
  AuxIniciarRecorrido()
  while (not aux_terminóElRecorrido() && not aux_hayMarca()) { AuxAvanzarRecorrido() }
}

//---------------------------------------------------------------------------------------------------/
/*---------------------------------- Operaciones de recorrido ---------------------------------------/
/---------------------------------------------------------------------------------------------------*/
// El Recorrido default es Este-Norte (los 3 deben usar los mismos parámetros)
procedure AuxIniciarRecorrido()    { AuxIniciarRecorridoGral          (Este, Norte)  }
procedure AuxAvanzarRecorrido()    { AuxAvanzarRecorridoGral          (Este, Norte)  }
function  aux_terminóElRecorrido() { return(aux_terminóElRecorridoGral(Este, Norte)) }

procedure AuxIniciarRecorridoGral(dirPpal, dirSecundaria) 
  { IrAlBorde(opuesto(dirPpal)) IrAlBorde(opuesto(dirSecundaria)) }

function aux_terminóElRecorridoGral(dirPpal, dirSecundaria) 
  { return (not puedeMover(dirPpal) && not puedeMover(dirSecundaria)) }

procedure AuxAvanzarRecorridoGral(dirPpal, dirSecundaria) {
    if     (puedeMover(dirPpal))       { Mover(dirPpal)                                                }
    elseif (puedeMover(dirSecundaria)) { IrAlBorde(opuesto(dirPpal)) Mover(dirSecundaria)              }
    else                               { IrAlBorde(opuesto(dirPpal)) IrAlBorde(opuesto(dirSecundaria)) }
}

/*==================================================================================================*/
/*---------------------------- FIN AUXILIARES de 00-Gobstones-Base.gbs -----------------------------*/
/*==================================================================================================*/



/*==================================================================================================*/
/*----------------------------------- INTERFAZ de 00-Listas-Base.gbs --------------------------------/
/----- Autor: Pablo E. "Fidel" Martínez López -------------------------------------------------------/
/----- EMail: fidel@unq.edu.ar                -------------------------------------------------------/
/----- Fecha creación: 2018.06                -------------------------------------------------------/
/----- Fecha última modificación: 2018.06     -------------------------------------------------------/
/----- Licencia: GNU General Public License, v2                                             ---------/
/----- Sitio Oficial de la licencia: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html  --------*/
/*==================================================================================================*/

//-------------------------------
// PARA CORRECCIÓN DE GOBSTONES, HASTA QUE LO ARREGLEMOS
function último(xs)  { return (ultimo(xs)) }
function esVacía(xs) { return (xs==[])     }
//-------------------------------

function calcularLongitud_(lista) { return(aux_calcularLongitud(lista)) }

/*==================================================================================================*/
/*-------------------------------- FIN INTERFAZ de 00-Listas-Base.gbs ------------------------------*/
/*==================================================================================================*/


/*==================================================================================================*/
/*-------------------------------- AUXILIARES de 00-Listas-Base.gbs --------------------------------*/
/*==================================================================================================*/
function aux_calcularLongitud(lista) {
  cantidadDeElementosContados := 0
  foreach elemento in lista { cantidadDeElementosContados := cantidadDeElementosContados + 1 }
  return(cantidadDeElementosContados)
}

/*==================================================================================================*/
/*------------------------------ FIN AUXILIARES de 00-Listas-Base.gbs ------------------------------*/
/*==================================================================================================*/



/*==================================================================================================*/
/*--------------------------------- REQUIERE 00-Gobstones-Base.gbs ---------------------------------*/
/*----------------------------------- REQUIERE 00-Listas-Base.gbs ----------------------------------*/
/*==================================================================================================*/

/*==================================================================================================*/
/*-------------------------- INTERFAZ de 01-01-NúmerosPorDígitos-Base.gbs ---------------------------/
/----- Autor: Pablo E. "Fidel" Martínez López -------------------------------------------------------/
/----- EMail: fidel@unq.edu.ar                -------------------------------------------------------/
/----- Fecha creación: 2018.06                -------------------------------------------------------/
/----- Fecha última modificación: 2018.06     -------------------------------------------------------/
/----- Licencia: GNU General Public License, v2                                             ---------/
/----- Sitio Oficial de la licencia: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html  --------*/
/*==================================================================================================*/

//---------------------------------------------------------------------------------------------------/
/*-------------------------------------- Definiciones de tipos --------------------------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY TIPOS NUEVOS. Se usan los números de Gobstones

//---------------------------------------------------------------------------------------------------/
/*----------------------------- Operaciones de creación de números (interfaz) -----------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY OPERACIONES DE CREACIÓN NUEVAS. Se usan los números de Gobstones

//---------------------------------------------------------------------------------------------------/
/*------------------------------ Operaciones de acceso a números (interfaz) -------------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY OPERACIONES DE ACCESO NUEVAS. Se usan los números de Gobstones

//---------------------------------------------------------------------------------------------------/
/*------------------ Operaciones de sensado de números en el tablero (interfaz) ---------------------/
/---------------------------------------------------------------------------------------------------*/
function hayNúmeroPorDígitos() { return(aux_hayNúmeroPorDígitos()) }

function elNúmeroPorDígitosEstáOculto()   { return(    aux_elNúmeroPorDígitosEstáOcultoConBoom())                       }
function elNúmeroPorDígitosNoEstáOculto() { return(not aux_elNúmeroPorDígitosEstáOcultoConBoom())                       }
function hayNúmeroPorDígitosOculto()      { return(aux_hayNúmeroPorDígitos() &&     aux_elNúmeroPorDígitosEstáOculto()) }
function hayNúmeroPorDígitosNoOculto()    { return(aux_hayNúmeroPorDígitos() && not aux_elNúmeroPorDígitosEstáOculto()) }

//---------------------------------------------------------------------------------------------------/
/*--------------------------- Operaciones de E/S de números (interfaz) ------------------------------/
/---------------------------------------------------------------------------------------------------*/
function  númeroPorDígitosActual()        { return(aux_númeroPorDígitosActual()) }
function  númeroPorDígitosOculto()        { return(aux_númeroPorDígitosOculto()) }

procedure PonerNúmeroPorDígitos_(número)  { AuxPonerNúmeroPorDígitos(número)     }
procedure SacarNúmeroPorDígitosActual()   { AuxSacarNúmeroPorDígitosActual()     }

procedure OcultarNúmeroPorDígitosActual() { AuxOcultarNúmeroPorDígitosActual()   }
procedure RevelarNúmeroPorDígitosActual() { AuxRevelarNúmeroPorDígitosActual()   }

/*==================================================================================================*/
/*------------------------ FIN INTERFAZ de 01-01-NúmerosPorDígitos-Base.gbs ------------------------*/
/*==================================================================================================*/


/*==================================================================================================*/
/*------------------------- AUXILIARES de 01-01-NúmerosPorDígitos-Base.gbs -------------------------*/
/*==================================================================================================*/

//---------------------------------------------------------------------------------------------------/
/*----------------------------- Auxiliares para construir números ----------------------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY OPERACIONES ESPECÍFICAS DE CONSTRUCCIÓN. Se usan los número de Gobstones

//---------------------------------------------------------------------------------------------------/
/*------------------------------ Auxiliares para acceso a números -----------------------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY OPERACIONES DE ACCESO NUEVAS. Se usan los números de Gobstones

//---------------------------------------------------------------------------------------------------/
/*--------------------------- Auxiliares para sensar números en el tablero --------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_hayNúmeroPorDígitos() { return(aux_hayDígito()) } 
function aux_hayDígito() {
  return (aux_hayTipoDígito() 
       && aux_hayDatoDígito()) 
}

function aux_hayTipoDígito() { return (aux_esTipoDígito(aux_leerTipo())) }
function aux_hayDatoDígito() { return (aux_esDatoDígito(aux_leerDato())) }

function aux_elDígitoEstáOculto() { 
  // PRECONDICIÓN: hay un dígito
  return (aux_hayAtributoReverso())
}

function aux_elNúmeroPorDígitosEstáOculto() {
  // PRECONDICIÓN: hay un número por dígitos
  return (aux_elDígitoEstáOculto())
}

function aux_elDígitoEstáOcultoConBoom() { 
  if (not aux_hayDígito()) { BOOM("No hay un dígito que pueda estar oculto") }
  return(aux_elDígitoEstáOculto())    
}

function aux_elNúmeroPorDígitosEstáOcultoConBoom() {
  if (not aux_hayNúmeroPorDígitos()) { BOOM("No hay un número por dígitos que pueda estar oculto") }
  return(aux_elNúmeroPorDígitosEstáOculto())    
}

//---------------------------------------------------------------------------------------------------/
/*------------------------------- Operaciones de E/S de números -------------------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_dígitoActual() {
  // PRECONDICIÓN: hay un dígito en la celda actual
  return(aux_dígitoParaElCódigo(aux_leerDato()))
}

function aux_númeroPorDígitosActual() {
  if (aux_elDígitoEstáOculto()) { BOOM("No puedo ver el número por dígitos actual") }
  return (aux_númeroPorDígitosDesdeLaCeldaActual())
}

function aux_númeroPorDígitosOculto() {
  if (not aux_elDígitoEstáOculto()) { BOOM("Con esta operación solo puedo ver números por dígitos que están ocultos") }
  return (aux_númeroPorDígitosDesdeLaCeldaActual())
}

function aux_númeroPorDígitosDesdeLaCeldaActual() {
   dígitosLeídos := []
   while (not aux_terminóElRecorridoGral(Este, Sur) && aux_hayDígito()) {
      dígitosLeídos := dígitosLeídos ++ [ aux_dígitoActual() ]
      AuxAvanzarRecorridoGral(Este, Sur)
   }
   if (aux_hayDígito()) { 
      dígitosLeídos := dígitosLeídos ++ [ aux_dígitoActual() ]
  }
  return(aux_númeroPorDígitosParaElCódigo(dígitosLeídos))
}         

procedure AuxPonerDígito(dígito) { 
    AuxSacarTodas()
    AuxPoner__Veces(aux_colorParaElTipo(), aux_códigoParaElTipoDígito())
    AuxPoner__Veces(aux_colorParaElDato(), aux_códigoParaElDatoDígito(dígito))
}

procedure AuxPonerNúmeroPorDígitos(número) {
  movióDeMás := False
  dígitos := aux_códigoParaElNúmeroPorDígitos(número)
  while (not esVacía(dígitos) && not aux_terminóElRecorridoGral(Este, Sur)) {
    AuxPonerDígito(primero(dígitos))
    dígitos := resto(dígitos)
    AuxPasarASiguientePosición()
    movióDeMás := True
  }
  if (not esVacía(dígitos)) { AuxPonerDígito(primero(dígitos)) }
  else { if (movióDeMás) /* Retrocede un lugar */ { AuxAvanzarRecorridoGral(Oeste, Norte) } }
}

procedure AuxSacarDígito() { AuxSacarTodas() }
procedure AuxSacarNúmeroPorDígitosActual() {
  movióDeMás := False
  while (not aux_terminóElRecorridoGral(Este, Sur) && aux_hayDígito()) {
    AuxSacarDígito()
    AuxAvanzarRecorridoGral(Este, Sur)
    movióDeMás := True
  }
  if (aux_hayDígito())                     { AuxSacarDígito()                      }
  if (movióDeMás) /* Retrocede un lugar */ { AuxAvanzarRecorridoGral(Oeste, Norte) }
}

procedure AuxOcultarNúmeroPorDígitosActual()    { 
  movióDeMás := False
  while (not aux_terminóElRecorridoGral(Este, Sur) && aux_hayDígito() && not aux_elDígitoEstáOcultoConBoom()) {
    AuxOcultarDígitoActual()
    AuxAvanzarRecorridoGral(Este, Sur)
    movióDeMás := True
  }
  if (aux_hayDígito())                     { AuxOcultarDígitoActual()              }
  if (movióDeMás) /* Retrocede un lugar */ { AuxAvanzarRecorridoGral(Oeste, Norte) }
 }
 
 procedure AuxRevelarNúmeroPorDígitosActual() { 
  // PRECONDICIÓN: hay un número por dígitos oculto en la celda actual
  movióDeMás := False
  while (not aux_terminóElRecorridoGral(Este, Sur) && aux_hayDígito() && aux_elDígitoEstáOcultoConBoom()) {
    AuxRevelarDígitoActual()
    AuxAvanzarRecorridoGral(Este, Sur)
    movióDeMás := True
  }
  if (aux_hayDígito())                     { AuxRevelarDígitoActual()              }
  if (movióDeMás) /* Retrocede un lugar */ { AuxAvanzarRecorridoGral(Oeste, Norte) }

 }
 

procedure AuxOcultarDígitoActual()    { 
  // PRECONDICIÓN: hay un dígito no oculto en la celda actual
   AuxPonerAtributoReverso()
 }
 
 procedure AuxRevelarDígitoActual() { 
  // PRECONDICIÓN: hay un dígito oculto en la celda actual
   AuxSacarAtributoReverso()
 }
 
//---------------------------------------------------------------------------------------------------/
/*---------------------------- Operaciones auxiliares de codificación -------------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_esUnDígitoVálido(número)           { return(número >= 0 && número <= 9) }
function aux_esUnNúmeroPorDígitosVálido(número) { return(número >= 0)                }

function aux_dígitoParaElCódigo(códigoDígito) { return(códigoDígito) }
function aux_númeroPorDígitosParaElCódigo(códigoNúmeroPorDígitos) {
   númeroLeído      := 0
   dígitosFaltantes := códigoNúmeroPorDígitos
   while (not esVacía(dígitosFaltantes)) {
      númeroLeído      := númeroLeído * 10 + primero(dígitosFaltantes)
      dígitosFaltantes := resto(dígitosFaltantes)
   }

   return(númeroLeído)
}

function aux_códigoParaElDígito(dígito) { return(dígito) }
function aux_códigoParaElNúmeroPorDígitos(númeroPorDígitos) {
  // PRECONDICIÓN: el número no es negativo
  if (not aux_esUnNúmeroPorDígitosVálido(númeroPorDígitos)) { BOOM("No funciona con números negativos") }
  if (númeroPorDígitos == 0) { dígitosObtenidos := [0] }
  else {
    dígitosObtenidos := []
    valorAProcesar   := númeroPorDígitos
    while (valorAProcesar > 0) {
      dígitosObtenidos := [ aux_códigoParaElDígito(valorAProcesar mod 10) ] ++ dígitosObtenidos
      valorAProcesar   := valorAProcesar div 10
    }
  }
  return(dígitosObtenidos)
}

//---------------------------------------------------------------------------------------------------/
/*----------------------- Operaciones auxiliares de codificación para el tablero --------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_códigoParaElTipoDígito()       { return(1)                              }
function aux_códigoParaElDatoDígito(dígito) { 
    if (not aux_esDatoDígito(dígito)) { BOOM("En números por dígitos solo se representan dígitos en el tablero") }
    return(aux_códigoParaElDígito(dígito)) 
}

function aux_esTipoDígito(código) { return (código == aux_códigoParaElTipoDígito())  }
function aux_esDatoDígito(dato)   { return (aux_esUnDígitoVálido(dato))              }

/*==================================================================================================*/
/*------------------------- AUXILIARES de 01-01-NúmerosPorDígitos-Base.gbs -------------------------*/
/*==================================================================================================*/



/*==================================================================================================*/
/*--------------------------------- REQUIERE 00-Gobstones-Base.gbs ---------------------------------*/
/*==================================================================================================*/

/*==================================================================================================*/
/*-------------------------------- INTERFAZ de 01-Números-Base.gbs ----------------------------------/
/----- Autor: Pablo E. "Fidel" Martínez López -------------------------------------------------------/
/----- EMail: fidel@unq.edu.ar                -------------------------------------------------------/
/----- Fecha creación: 2018.06                -------------------------------------------------------/
/----- Fecha última modificación: 2018.06     -------------------------------------------------------/
/----- Licencia: GNU General Public License, v2                                             ---------/
/----- Sitio Oficial de la licencia: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html  --------*/
/*==================================================================================================*/

//---------------------------------------------------------------------------------------------------/
/*-------------------------------------- Definiciones de tipos --------------------------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY TIPOS NUEVOS. Se usan los números de Gobstones

//---------------------------------------------------------------------------------------------------/
/*----------------------------- Operaciones de creación de números (interfaz) -----------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY OPERACIONES DE CREACIÓN NUEVAS. Se usan los números de Gobstones

//---------------------------------------------------------------------------------------------------/
/*------------------------------ Operaciones de acceso a números (interfaz) -------------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY OPERACIONES DE ACCESO NUEVAS. Se usan los números de Gobstones

//---------------------------------------------------------------------------------------------------/
/*------------------ Operaciones de sensado de números en el tablero (interfaz) ---------------------/
/---------------------------------------------------------------------------------------------------*/
function hayNúmero() { return(aux_hayNúmero()) }

function elNúmeroEstáOculto()   { return(    aux_elNúmeroEstáOcultoConBoom())             }
function elNúmeroNoEstáOculto() { return(not aux_elNúmeroEstáOcultoConBoom())             }
function hayNúmeroOculto()      { return(aux_hayNúmero() &&     aux_elNúmeroEstáOculto()) }
function hayNúmeroNoOculto()    { return(aux_hayNúmero() && not aux_elNúmeroEstáOculto()) }

//---------------------------------------------------------------------------------------------------/
/*--------------------------- Operaciones de E/S de números (interfaz) ------------------------------/
/---------------------------------------------------------------------------------------------------*/
function  númeroActual()        { return(aux_númeroActual()) }
function  númeroOculto()        { return(aux_númeroOculto()) }

procedure PonerNúmero_(número)  { AuxPonerNúmero(número)     }
procedure SacarNúmeroActual()   { AuxSacarNúmeroActual()     }

procedure OcultarNúmeroActual() { AuxOcultarNúmeroActual()   }
procedure RevelarNúmeroActual() { AuxRevelarNúmeroActual()   }

/*==================================================================================================*/
/*------------------------------ FIN INTERFAZ de 01-Números-Base.gbs -------------------------------*/
/*==================================================================================================*/


/*==================================================================================================*/
/*------------------------------- AUXILIARES de 01-Números-Base.gbs --------------------------------*/
/*==================================================================================================*/

//---------------------------------------------------------------------------------------------------/
/*----------------------------- Auxiliares para construir números ----------------------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY OPERACIONES ESPECÍFICAS DE CONSTRUCCIÓN. Se usan los número de Gobstones

//---------------------------------------------------------------------------------------------------/
/*------------------------------ Auxiliares para acceso a números -----------------------------------/
/---------------------------------------------------------------------------------------------------*/
// NO HAY OPERACIONES DE ACCESO NUEVAS. Se usan los números de Gobstones

//---------------------------------------------------------------------------------------------------/
/*--------------------------- Auxiliares para sensar números en el tablero --------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_hayNúmero() { 
  return (aux_hayTipoNúmero() 
       && aux_hayDatoNúmero()) 
}

function aux_hayTipoNúmero() { return (aux_esTipoNúmero(aux_leerTipo())) }
function aux_hayDatoNúmero() { return (aux_esDatoNúmero(aux_leerDato())) }

function aux_elNúmeroEstáOculto() {
  // PRECONDICIÓN: hay un número
  return (aux_hayAtributoReverso())
}

function aux_elNúmeroEstáOcultoConBoom() {
  if (not aux_hayNúmero()) { BOOM("No hay un número que pueda estar oculto") }
  return(aux_elNúmeroEstáOculto())    
}

//---------------------------------------------------------------------------------------------------/
/*------------------------------- Operaciones de E/S de números -------------------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_númeroActual() {
  // PRECONDICIÓN: hay un número válido en la celda actual
  if (aux_elNúmeroEstáOculto()) { BOOM("No puedo ver el número actual pues está oculto") }
  return(aux_númeroParaElCódigo(aux_leerDato()))
}

function aux_númeroOculto() {
  if (not aux_elNúmeroEstáOculto()) { BOOM("Con esta operación solo puedo ver números que están ocultos") }
  return(aux_númeroParaElCódigo(aux_leerDato()))
}

procedure AuxPonerNúmero(número) { 
    AuxSacarTodas()
    AuxPonerRepresentaciónParaElNúmero(número)
}

procedure AuxSacarNúmeroActual() { 
  if (not(aux_hayNúmero())) { BOOM("No hay un número que sacar") }
  AuxSacarRepresentaciónParaElNúmero() 
}

procedure AuxOcultarNúmeroActual()    { 
  // PRECONDICIÓN: hay un número en la celda actual. Si está oculto, no hace nada
  if (not aux_hayNúmero())          { BOOM("No hay número que ocultar") }
  if (not aux_elNúmeroEstáOculto()) { AuxPonerAtributoReverso()         }
 }
 
 procedure AuxRevelarNúmeroActual() { 
  // PRECONDICIÓN: hay un número en la celda actual. Si no está oculto, no hace nada
  if (not aux_hayNúmero())      { BOOM("No hay número que revelar") }
  if (aux_elNúmeroEstáOculto()) { AuxSacarAtributoReverso()         }
 }
 
//---------------------------------------------------------------------------------------------------/
/*---------------------------- Operaciones auxiliares de codificación -------------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_esUnNúmeroVálido(número) { return(número >= 0 && número <= 999) }

function aux_númeroParaElCódigo(códigoNúmero) { return(códigoNúmero-1000) }

function aux_esCódigoParaElNúmero(códigoNúmero) {
  return (aux_esUnNúmeroVálido(aux_númeroParaElCódigo(códigoNúmero)))
}

function aux_códigoParaElNúmero(número) {
  // PRECONDICIÓN: el número no es negativo
  if (not aux_esUnNúmeroVálido(número)) { BOOM("No funciona con números negativos ni mayores a 999") }
  return(1000+número)
}

//---------------------------------------------------------------------------------------------------/
/*----------------------- Operaciones auxiliares de codificación para el tablero --------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_códigoParaElTipoNúmero()           { return(10)                                 }
function aux_códigoParaElDatoNúmero(datoNúmero) { return(aux_códigoParaElNúmero(datoNúmero)) }

function aux_esTipoNúmero(código) { return (código == aux_códigoParaElTipoNúmero())  }
function aux_esDatoNúmero(dato)   { return (aux_esCódigoParaElNúmero(dato))          }

procedure AuxPonerRepresentaciónParaElNúmero(número) {
  AuxPoner__Veces(aux_colorParaElTipo(), aux_códigoParaElTipoNúmero())
  AuxPoner__Veces(aux_colorParaElDato(), aux_códigoParaElDatoNúmero(número))
}

procedure AuxSacarRepresentaciónParaElNúmero() {
  // PRECONDICIÓN: hay un número en la celda actual
  AuxSacarTodas()
}
/*==================================================================================================*/
/*------------------------------- AUXILIARES de 01-Números-Base.gbs --------------------------------*/
/*==================================================================================================*/



/*==================================================================================================*/
/*--------------------------------- REQUIERE 00-Gobstones-Base.gbs ---------------------------------*/
/*==================================================================================================*/

/*==================================================================================================*/
/*--------------------------------- INTERFAZ de 02-Letras-Base.gbs ----------------------------------/
/----- Autor: Pablo E. "Fidel" Martínez López -------------------------------------------------------/
/----- EMail: fidel@unq.edu.ar                -------------------------------------------------------/
/----- Fecha creación: 2018.06                -------------------------------------------------------/
/----- Fecha última modificación: 2018.06     -------------------------------------------------------/
/----- Licencia: GNU General Public License, v2                                             ---------/
/----- Sitio Oficial de la licencia: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html  --------*/
/*==================================================================================================*/

//---------------------------------------------------------------------------------------------------/
/*-------------------------------------- Definiciones de tipos --------------------------------------/
/---------------------------------------------------------------------------------------------------*/
type Letra is variant { 
   case Espacio {} 
   case A {}    case B {}    case C {}    case D {}    case E {}    case F {}    case G {}    case H {}    case I {}    
   case J {}    case K {}    case L {}    case M {}    case N {}    case Ñ {}    case O {}    case P {}    case Q {}
   case R {}    case S {}    case T {}    case U {}    case V {}    case W {}    case X {}    case Y {}    case Z {}
}

//---------------------------------------------------------------------------------------------------/
/*------------------------------ Operaciones de creación de letras (interfaz) -----------------------/
/---------------------------------------------------------------------------------------------------*/
{-
/*@ATTRIBUTE@tooltip@Denota una letra*/
/*@ATTRIBUTE@block_name@_@*/
/*@ATTRIBUTE@block_dropdown@[(" ", 'Espacio'), ("A", 'A'), ("B", 'B'), ("C", 'C'), ("D", 'D'), ("E", 'E'), ("F", 'F'), ("G", 'G'), ("H", 'H'), ("I", 'I'), ("J", 'J'), ("K", 'K'), ("L", 'L'), ("M", 'M'), ("N", 'N'), ("Ñ", 'Ñ'), ("O", 'O'), ("P", 'P'), ("Q", 'Q'), ("R", 'R'), ("S", 'S'), ("T", 'T'), ("U", 'U'), ("V", 'V'), ("W", 'W'), ("X", 'X'), ("Y", 'Y'), ("Z", 'Z')]@*/
function letra_(letra) { return(letra) }
-}

function letra_(códigoLetra) { return(aux_letraParaElCódigo(códigoLetra)) }

//---------------------------------------------------------------------------------------------------/
/*------------------------------- Operaciones de acceso a letras (interfaz) -------------------------/
/---------------------------------------------------------------------------------------------------*/
/*@ATTRIBUTE@block_name@_ está antes que la letra _@*/   function esMenorLetra__(letra1, letra2) { return(aux_esMenorLetra(letra1, letra2)) }
/*@ATTRIBUTE@block_name@_ está después que la letra _@*/ function esMayorLetra__(letra1, letra2) { return(aux_esMayorLetra(letra1, letra2)) }
/*@ATTRIBUTE@block_name@la letra más chica@*/            function minLetra()             { return(aux_minLetra())            }
/*@ATTRIBUTE@block_name@la letra más grande@*/           function maxLetra()             { return(aux_maxLetra())            }
/*@ATTRIBUTE@block_name@letra siguiente a _@*/           function letraSiguiente_(letra) { return(aux_letraSiguiente(letra)) }
/*@ATTRIBUTE@block_name@letra previa a _@*/              function letraPrevia_(letra)    { return(aux_letraPrevia(letra))    }

//---------------------------------------------------------------------------------------------------/
/*------------------- Operaciones de sensado de letras en el tablero (interfaz) ---------------------/
/---------------------------------------------------------------------------------------------------*/
function hayLetra() { return(aux_hayLetra()) }

function laLetraEstáOculta()   { return(    aux_laLetraEstáOcultaConBoom())            }
function laLetraNoEstáOculta() { return(not aux_laLetraEstáOcultaConBoom())            }
function hayLetraOculta()      { return(aux_hayLetra() &&     aux_laLetraEstáOculta()) }
function hayLetraNoOculta()    { return(aux_hayLetra() && not aux_laLetraEstáOculta()) }

//---------------------------------------------------------------------------------------------------/
/*---------------------------- Operaciones de E/S de letras (interfaz) ------------------------------/
/---------------------------------------------------------------------------------------------------*/
function  letraActual()      { return(aux_letraActual()) }
function  letraOculta()      { return(aux_letraOculta()) }

procedure PonerLetra_(letra) { AuxPonerLetra(letra)      }
procedure SacarLetraActual() { AuxSacarLetraActual()     }

procedure OcultarLetraActual() { AuxOcultarLetraActual() }
procedure RevelarLetraActual() { AuxRevelarLetraActual() }

/*==================================================================================================*/
/*------------------------------- FIN INTERFAZ de 02-Letras-Base.gbs -------------------------------*/
/*==================================================================================================*/


/*==================================================================================================*/
/*-------------------------------- AUXILIARES de 02-Letras-Base.gbs --------------------------------*/
/*==================================================================================================*/

//---------------------------------------------------------------------------------------------------/
/*------------------------------ Auxiliares para construir letras ----------------------------------/
/---------------------------------------------------------------------------------------------------*/
/* NO HAY OPERACIONES ESPECÍFICAS DE CONSTRUCCIÓN de Letras
   Se proveen con los constructores del tipo 
 */

//---------------------------------------------------------------------------------------------------/
/*------------------------------- Auxiliares para acceso a letras -----------------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_esMenorLetra(letra1, letra2) { return (aux_códigoParaLaLetra(letra1) < aux_códigoParaLaLetra(letra2)) }
function aux_esMayorLetra(letra1, letra2) { return (aux_códigoParaLaLetra(letra1) > aux_códigoParaLaLetra(letra2)) }

function aux_minLetra() { return (aux_letraParaElCódigo(aux_minCódigoParaLaLetra())) }
function aux_maxLetra() { return (aux_letraParaElCódigo(aux_maxCódigoParaLaLetra())) }

function aux_letraSiguiente(letra) { return (aux_letraParaElCódigo(aux_códigoParaLaLetraSiguiente(letra))) }
function aux_letraPrevia(letra)    { return (aux_letraParaElCódigo(aux_códigoParaLaLetraPrevia(letra)))    }

//---------------------------------------------------------------------------------------------------/
/*---------------------------- Auxiliares para sensar letras en el tablero --------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_hayLetra() { 
  return (aux_hayTipoLetra() 
       && aux_hayDatoLetra()) 
}

function aux_hayTipoLetra() { return (aux_esTipoLetra(aux_leerTipo())) }
function aux_hayDatoLetra() { return (aux_esDatoLetra(aux_leerDato())) }

function aux_laLetraEstáOculta() {
  // PRECONDICIÓN: hay un número
  return (aux_hayAtributoReverso())
}

function aux_laLetraEstáOcultaConBoom() {
  if (not aux_hayLetra()) { BOOM("No hay una letra que pueda estar oculta") }
  return(aux_elNúmeroEstáOculto())    
}

//---------------------------------------------------------------------------------------------------/
/*-------------------------------- Operaciones de E/S de letras -------------------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_letraActual() {
  // PRECONDICIÓN: hay una letra en la celda actual
  if (not (aux_hayLetra()))      { BOOM("No hay una letra que pueda leer") }
  return(aux_letraParaElCódigo(aux_leerDato()))
}         

function aux_letraOculta() {
  if (not aux_laLetraEstáOculta()) { BOOM("Con esta operación solo puedo ver letras que están ocultas") }
  return(aux_letraParaElCódigo(aux_leerDato()))
}

procedure AuxPonerLetra(letra) {
  AuxSacarTodas()
  AuxPonerRepresentaciónParaLaLetra(letra)
}

procedure AuxSacarLetraActual() {
  // PRECONDICIÓN: hay una letra en la celda actual
  if (not(aux_hayLetra())) { BOOM("No hay una letra que sacar") }
  AuxSacarRepresentaciónParaLaLetra()
}

procedure AuxOcultarLetraActual()    { 
  // PRECONDICIÓN: hay una letra en la celda actual. Si está oculta, no hace nada
  if (not aux_hayLetra())          { BOOM("No hay letra que ocultar") }
  if (not aux_laLetraEstáOculta()) { AuxPonerAtributoReverso()        }
 }
 
 procedure AuxRevelarLetraActual() { 
  // PRECONDICIÓN: hay una letra en la celda actual. Si no está oculta, no hace nada
  if (not aux_hayLetra())      { BOOM("No hay letra que revelar") }
  if (aux_laLetraEstáOculta()) { AuxSacarAtributoReverso()         }
 }
 
//---------------------------------------------------------------------------------------------------/
/*---------------------------- Operaciones auxiliares de codificación -------------------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_minCódigoParaLaLetra() { return(10) }
function aux_maxCódigoParaLaLetra() { return(37) }

function aux_esCódigoParaLaLetra(códigoLetra) {
  return (códigoLetra >= aux_minCódigoParaLaLetra() 
       && códigoLetra <= aux_maxCódigoParaLaLetra())
}

function aux_códigoParaLaLetra(letra) {
  return (choose
    10 when (letra == Espacio)
    11 when (letra == A)
    12 when (letra == B)
    13 when (letra == C)
    14 when (letra == D)
    15 when (letra == E)
    16 when (letra == F)
    17 when (letra == G)
    18 when (letra == H)
    19 when (letra == I)
    20 when (letra == J)
    21 when (letra == K)
    22 when (letra == L)
    23 when (letra == M)
    24 when (letra == N)
    25 when (letra == Ñ)
    26 when (letra == O)
    27 when (letra == P)
    28 when (letra == Q)
    29 when (letra == R)
    30 when (letra == S)
    31 when (letra == T)
    32 when (letra == U)
    33 when (letra == V)
    34 when (letra == W)
    35 when (letra == X)
    36 when (letra == Y)
    37 when (letra == Z)
    boom("Al extender las letras, deberías extender también las funciones de codificación") otherwise
    )
}

function aux_letraParaElCódigo(códigoLetra) {
  // PRECONDICIÓN: el código es válido, o sea, corresponde a una letra 
  //               (está entre aux_minCódigoParaLaLetra() y aux_maxCódigoParaLaeLetra())
  if (not aux_esCódigoParaLaLetra(códigoLetra)) { BOOM("No es un código de letra válido") }
  return (choose
            Espacio when (códigoLetra == 10)
            A       when (códigoLetra == 11)
            B       when (códigoLetra == 12)
            C       when (códigoLetra == 13)
            D       when (códigoLetra == 14)
            E       when (códigoLetra == 15)
            F       when (códigoLetra == 16)
            G       when (códigoLetra == 17)
            H       when (códigoLetra == 18)
            I       when (códigoLetra == 19)
            J       when (códigoLetra == 20)
            K       when (códigoLetra == 21)
            L       when (códigoLetra == 22)
            M       when (códigoLetra == 23)
            N       when (códigoLetra == 24)
            Ñ       when (códigoLetra == 25)
            O       when (códigoLetra == 26)
            P       when (códigoLetra == 27)
            Q       when (códigoLetra == 28)
            R       when (códigoLetra == 29)
            S       when (códigoLetra == 30)
            T       when (códigoLetra == 31)
            U       when (códigoLetra == 32)
            V       when (códigoLetra == 33)
            W       when (códigoLetra == 34)
            X       when (códigoLetra == 35)
            Y       when (códigoLetra == 36)
            Z       when (códigoLetra == 37)
            boom("¡NO DEBERÍA SUCEDER! Revisar aux_esCódigoParaLaLetra.") otherwise
          )
}

function aux_códigoParaLaLetraSiguiente(letra) {
  códigoLetra := aux_códigoParaLaLetra(letra)
  return (choose 
           aux_minCódigoParaLaLetra()  when (códigoLetra == aux_maxCódigoParaLaLetra())
           códigoLetra+1               otherwise
         )
}

function aux_códigoParaLaLetraPrevia(letra) {
  códigoLetra := aux_códigoParaLaLetra(letra)
  return (choose 
           aux_maxCódigoParaLaLetra()  when (códigoLetra == aux_minCódigoParaLaLetra())
           códigoLetra-1               otherwise
         )
}


//---------------------------------------------------------------------------------------------------/
/*----------------------- Operaciones auxiliares de codificación para el tablero --------------------/
/---------------------------------------------------------------------------------------------------*/
function aux_códigoParaElTipoLetra()      { return(2)                            }
function aux_códigoParaElDatoLetra(letra) { return(aux_códigoParaLaLetra(letra)) }

function aux_esTipoLetra(código) { return (código == aux_códigoParaElTipoLetra())                                    }
function aux_esDatoLetra(dato)   { return (dato >= aux_minCódigoParaLaLetra() && dato <= aux_maxCódigoParaLaLetra()) }

procedure AuxPonerRepresentaciónParaLaLetra(letra) {
  AuxPoner__Veces(aux_colorParaElTipo(), aux_códigoParaElTipoLetra())
  AuxPoner__Veces(aux_colorParaElDato(), aux_códigoParaElDatoLetra(letra))
}

procedure AuxSacarRepresentaciónParaLaLetra() {
  // PRECONDICIÓN: hay una letra en la celda actual
  AuxSacarTodas()
}
/*==================================================================================================*/
/*-------------------------------- AUXILIARES de 02-Letras-Base.gbs --------------------------------*/
/*==================================================================================================*/
