interactive program {
  K_ARROW_LEFT  -> { MoverseHacia(Oeste)     }
  K_ARROW_RIGHT -> { MoverseHacia(Este)      }
  K_ARROW_UP    -> { MoverseHacia(Norte)     }
  K_ARROW_DOWN  -> { MoverseHacia(Sur)       }
  K_ENTER       -> { ProcesarLaCartaActual() }
}

function lasCartasSonIguales(primeraCartaAControlar, segundaCartaACotrolar) {
  return (...)
}

function lasCartasDestapadasSonIguales() {
  primeraCarta := leerCarta()
  IrALaCartaOtraCartaDestapada()
  segundaCarta := leerCarta()
  return (lasCartasSonIguales(primeraCarta, segundaCarta))
}

function hayDosCartasDestapadas() {
  return (hayCartaDestapadaSinIluminar() 
       && hayOtraCartaDestapadaSinIluminar())
}

procedure MoverseHacia(dir) {
    if (hayDosCartasDestapadas()) { TaparAmbasCartasDestapadas() }
    PasarASiguientePosiciónHacia_(dir)
}

procedure ProcesarLaCartaActual() {
  DestaparLaCartaActualSiSePuede()
  IluminarLasCartasDestapasSiCorresponde()
}

procedure IluminarLasCartasDestapasSiCorresponde() {
  if (hayDosCartasDestapadas() && lasCartasDestapadasSonIguales())
    { IluminarAmbasCartasDestapadas() } 
}

procedure DestaparLaCartaActualSiSePuede() { if (hayCartaTapada()) { DarVueltaLaCartaActual() } }

procedure IluminarAmbasCartasDestapadas() {
  // Primero la lejana, para que la última en procesar sea la inicial
  IrALaCartaOtraCartaDestapada()
  IluminarLaCartaActual()
  IrALaCartaOtraCartaDestapada()
  IluminarLaCartaActual()
  // Termina posicionado sobre la carta inicial
}

procedure TaparAmbasCartasDestapadas() {
  // Primero la lejana, para que la última en procesar sea la inicial
  IrALaCartaOtraCartaDestapada()
  DarVueltaLaCartaActual()
  IrALaCartaOtraCartaDestapada()
  DarVueltaLaCartaActual()
  // Termina posicionado sobre la carta inicial
}

procedure IrALaCartaOtraCartaDestapada() {
  PasarASiguientePosición()
  while (not hayCartaDestapadaSinIluminar()) { PasarASiguientePosición() }
}

